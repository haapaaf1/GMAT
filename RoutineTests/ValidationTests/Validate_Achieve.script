
%  Script Mission - Hohmann Transfer Example
%
%  This script demonstrates how to target a Hohmann Transfer
%
%  REVSION HISTORY
%  $Id: Validate_Achieve.script,v 1.1 2007/12/03 16:32:48 wshoan Exp $
Create Spacecraft Sat WrongSat;
Create Thruster Thruster WrongThruster;
Create FuelTank WrongTank;
Create Formation Formation WrongFormation
Create ImpulsiveBurn ImpBurn WrongImpBurn
Create FiniteBurn FiniteBurn WrongFiniteBurn
Create Propagator Prop WrongProp
Create OpenGLPlot OpenGL WrongOpenGL
%Create XYPlot XYPlot WrongXYPlot
Create XYPlot XYPlot1 WrongXYPlot
XYPlot1.IndVar = Sat.X;
WrongXYPlot.IndVar = WrongSat.X;
Create ReportFile ReportFile WrongReportFile
Create Variable Var WrongVar
Create Array Array[3,3] WrongArray[3,3]
Create CoordinateSystem CoordSys WrongCoordSys;
Create String WrongString;

%----------------------------------------
%---------- Spacecraft
%----------------------------------------

Create Spacecraft sat;
GMAT sat.DateFormat = TAIModJulian;
GMAT sat.Epoch = 21545;
GMAT sat.CoordinateSystem = EarthMJ2000Eq;
GMAT sat.DisplayStateType = Cartesian;
GMAT sat.X = 7100;
GMAT sat.Y = 0;
GMAT sat.Z = 1300;
GMAT sat.VX = 0;
GMAT sat.VY = 7.3499999999999996;
GMAT sat.VZ = 1;
GMAT sat.DryMass = 850;
GMAT sat.Cd = 2.2;
GMAT sat.Cr = 1.8;
GMAT sat.DragArea = 15;
GMAT sat.SRPArea = 1;

%----------------------------------------
%---------- ForceModels and Propagators
%----------------------------------------

Create ForceModel DefaultProp_ForceModel;
GMAT DefaultProp_ForceModel.CentralBody = Earth;
GMAT DefaultProp_ForceModel.PointMasses = {Earth};
GMAT DefaultProp_ForceModel.Drag = None;
GMAT DefaultProp_ForceModel.SRP = Off;
GMAT DefaultProp_ForceModel.ErrorControl = RSSStep;

Create Propagator DefaultProp;
GMAT DefaultProp.FM = DefaultProp_ForceModel;
GMAT DefaultProp.Type = RungeKutta89;
GMAT DefaultProp.InitialStepSize = 120;
GMAT DefaultProp.Accuracy = 9.9999999999999994e-012;
GMAT DefaultProp.MinStep = 0.001;
GMAT DefaultProp.MaxStep = 2700;
GMAT DefaultProp.MaxStepAttempts = 50;

%----------------------------------------
%---------- Burns
%----------------------------------------

Create ImpulsiveBurn TOI;
GMAT TOI.Origin = Earth;
GMAT TOI.Axes = VNB;
GMAT TOI.VectorFormat = Cartesian;
GMAT TOI.Element1 = 0.0001;
GMAT TOI.Element2 = 0;
GMAT TOI.Element3 = 0;


Create ImpulsiveBurn GOI;
GMAT GOI.Origin = Earth;
GMAT GOI.Axes = VNB;
GMAT GOI.VectorFormat = Cartesian;
GMAT GOI.Element1 = 0;
GMAT GOI.Element2 = 0;
GMAT GOI.Element3 = 0;

%----------------------------------------
%---------- Solvers
%----------------------------------------
Create DifferentialCorrector DC;
GMAT DC.ShowProgress = true;
GMAT DC.ReportStyle = Normal;
GMAT DC.TargeterTextFile = targeter_DefaultDC.data;
GMAT DC.MaximumIterations = 25;
GMAT DC.UseCentralDifferences = false;

Create ReportFile Data;

%----------------------------------------
%---------- Mission Sequence
%----------------------------------------

% Propagate orbit for specified duration
Report Data sat.A1ModJulian sat.X sat.Y sat.Z sat.VX sat.VY sat.VZ;
GMAT Data.WriteHeaders = Off;
Propagate DefaultProp(sat, {sat.ElapsedSecs = 86400});
Report Data sat.A1ModJulian sat.X sat.Y sat.Z sat.VX sat.VY sat.VZ;

% Propagate orbit to the next Periapsis point
Propagate DefaultProp(sat, {sat.Periapsis});
Report Data sat.A1ModJulian sat.X sat.Y sat.Z sat.VX sat.VY sat.VZ;

% Burn in the velocity direction to reach an alternate Apoapsis point
%     e = 0;
Target DC;

   %  
   Vary DC(TOI.V = 0.5, {Perturbation = 0.0001, MaxStep = 0.2, Lower = 0, Upper = 3.14159});
   Maneuver TOI(sat);
   Propagate DefaultProp(sat, {sat.Apoapsis});

   %*************************************************************** 
   %--------------------------------------------------------------
   %-----------  Command Exceptions !!!
   %--------------------------------------------------------------
   %***************************************************************
   Achieve DC(sat.Earth.RMAG = 42165, {DNE = 0.1});
   %%%%%% CRASHES --------- not any more
   DNE DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   DNE Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC(sat.RMAG = 42165, {Tolerance = 0.1, DNE = 1.0});
   %%%%%% CRASHES --------- not any more
   sat.X DC(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   Achieve DC(sat.EARTH.RMAG = 42165, {sat.X = .0001});
   %% 
   Achieve DC(WrongArray = 1.0, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = WrongArray, {Tolerance  = 1});
   Achieve DC(sat.Earth.RMAG = WrongThruster, {Tolerance  = 1});
   Achieve DC(sat.Earth.RMAG = WrongString, {Tolerance  = 1});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance  = WrongArray});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance  = WrongSat});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance  == 1});
   
   %%%%%% CRASHES --------- not any more
   1.0 DC(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   1.0 Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   Achieve 1.0(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   Achieve DC(1.0 = 42165, {Tolerance = .0001});
   Achieve DC(sat.Earth.RMAG = 42165, {1.0 = .0001});
   
   %%% not the best error message
   Achieve DC(sat.Earth.RMAG < 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG > 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1);
   Achieve DC(sat.Earth.RMAG = 42165, (Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, [Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1]); 
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1}];
   Achieve DC(sat.Earth.RMAG = 42165, {  = 0.1});
   Achieve DC(  = 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG =  , {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG  42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = });
   Achieve DC(sat.Earth.RMAG = 42165, {  = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165 {Tolerance = 0.1}); %%%%%%%
   Achieve, DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance, = 0.1}); %%%%%%
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1},); %%%%%%


   %***************************************************************
   %--------------------------------------------------------------
   %-----------  Interpreter Exceptions !!!
   %--------------------------------------------------------------
   %***************************************************************

   %---------------------------------------
   %  Use of nonexistent resourses
   %---------------------------------------
   % See Achieve2.script
   % Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = DNE});
   %///  Achieve DC(sat.Earth.RMAG = 42165, {DNE = 0.1});
   Achieve DC(sat.Earth.DNE = 42165, {Tolerance = 0.1});
   Achieve DNE(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   % 
   Achieve DC(DNE.RMAG = 42165, {Tolerance = 0.1});
   %///  DNE DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   %///  Achieve DC(sat.RMAG = 42165, {Tolerance = 0.1, DNE = 1.0});

   %---------------------------------------
   %  Improper use of resources
   %---------------------------------------
   % See Achieve2.script (next 3)
   %Achieve DC(sat.CoordinateSystem = 1.0, {Tolerance == 0.1});
   %Achieve DC(sat.Earth.RMAG = sat.CoordinateSystem, {Tolerance == 0.1});
   %Achieve DC(sat.Earth.RMAG = 42165, {Tolerance  == WrongSat});
   %  Very confusing error message - OK now
   Achieve WrongSat(sat.Earth.RMAG = 42165, {Tolerance  = 1});
   Achieve WrongArray(sat.Earth.RMAG = 42165, {Tolerance  = 1});

   %---------------------------------------
   %  Improper use of parameters
   %---------------------------------------

   %---- Improper use of allowed parameters
   %///  sat.X DC(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   Achieve sat.X(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   %///  Achieve DC(sat.EARTH.RMAG = 42165, {sat.X = .0001});

   %---- Disallowed parameters
   %********* Command Exceptions ***********
   %///  Achieve DC(WrongArray = 1.0, {Tolerance == 0.1});
   %///  Achieve DC(sat.Earth.RMAG = WrongArray, {Tolerance  ==1});
   %///  Achieve DC(sat.Earth.RMAG = 42165, {Tolerance  == WrongArray});

   %---------------------------------------
   %  Improper use of real numbers
   %---------------------------------------
   %///  1.0 DC(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   Achieve 1.0(sat.Earth.RMAG = 42165, {Tolerance = .0001});
   %///  Achieve DC(1.0 = 42165, {Tolerance = .0001});
   %///  Achieve DC(sat.Earth.RMAG = 42165, {1.0 = .0001});

   %-------------------------------------------------
   %  Improper use of conditional operators
   %-------------------------------------------------
   % Catches, but not great error messages
   Achieve DC(sat.Earth.RMAG >= 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG <= 42165, {Tolerance = 0.1});
   %
   Achieve DC(sat.Earth.RMAG =< 42165, {Tolerance = 0.1}); 
   Achieve DC(sat.Earth.RMAG == 42165, {Tolerance = 0.1});
   %///  Achieve DC(sat.Earth.RMAG < 42165, {Tolerance = 0.1});
   %///  Achieve DC(sat.Earth.RMAG > 42165, {Tolerance = 0.1});

  %---------------------------------------------------
   %  Improper use of brackets and parenthesis
   %---------------------------------------------------

   %---  Missing Parenthesis ----
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1};
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1};
   %  
   %Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   % 
   Achieve DCsat.Earth.RMAG = 42165, {Tolerance = 0.1});

   %---  Missing curly brackets
   %///  Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1);
   % should throw an exception but does not ... <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
   Achieve DC(sat.Earth.RMAG = 42165, Tolerance = 0.1);
   Achieve DC(sat.Earth.RMAG = 42165, Tolerance = 0.1});

   %--- Miscellaneous bracket and parentheses errors
   %/// Achieve DC(sat.Earth.RMAG = 42165, (Tolerance = 0.1});
   %/// Achieve DC(sat.Earth.RMAG = 42165, [Tolerance = 0.1});
   %/// Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1]); 
   % 
   Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1)};
   %/// Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1}];
   %  CRASH - fixed
   Achieve DC[sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   %  CRASH - fixed 
   Achieve DC[sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG = 42165, (Tolerance = 0.1});
   Achieve DC{sat.Earth.RMAG = 42165, (Tolerance = 0.1});

   %---------------------------------------
   %  Missing command elements
   %---------------------------------------
   %/// Achieve DC(sat.Earth.RMAG = 42165, {  = 0.1});
   %/// Achieve DC(  = 42165, {Tolerance = 0.1});
   %/// Achieve DC(sat.Earth.RMAG =  , {Tolerance = 0.1});
   %/// Achieve DC(sat.Earth.RMAG  42165, {Tolerance = 0.1});
   %/// Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = });
   %/// Achieve DC(sat.Earth.RMAG = 42165, {  = 0.1});
   % CRASH - no longer crashes
   Achieve;
   Achieve  (sat.Earth.RMAG = 42165, {Tolerance = 0.1});

   %--------------------------------
   %-------  Comma Errors    -------
   %--------------------------------

   %---  Missing commas
   Achieve DC(sat.Earth.RMAG = 42165 {Tolerance = 0.1});

   %---  Improper use of commas
   %///  Achieve, DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC,(sat.Earth.RMAG = 42165, {Tolerance = 0.1});
   Achieve DC(sat.Earth.RMAG, = 42165, {Tolerance = 0.1});
   %///  Achieve DC(sat.Earth.RMAG = 42165, {Tolerance, = 0.1});
   %///  Achieve DC(sat.Earth.RMAG = 42165, {Tolerance = 0.1},);

   %----------------------------------------------------------
   %  Improper use of closing branch command statement
   %----------------------------------------------------------
   %  Not applicable, this is not a branch command

EndTarget;  % For targeter DC

Report Data sat.A1ModJulian sat.X sat.Y sat.Z sat.VX sat.VY sat.VZ;