function [MMSrefSat_est,MMS1dV_est,MMS2dV_est,MMS3dV_est,MMSrefSat_truth,MMS1dV_truth,MMS2dV_truth,MMS3dV_truth,tankMassAftFunc,tankPressureAftFunc,PerformIBurn_refSatEst,PerformIBurn_1dVEst,PerformIBurn_2dVEst,PerformIBurn_3dVEst,PerformIBurn_refSatTruth,PerformIBurn_1dVTruth,PerformIBurn_2dVTruth,PerformIBurn_3dVTruth] = Bug2230_Func_PerformPositionFBurn(MMSrefSat_est,MMS1dV_est,MMS2dV_est,MMS3dV_est,MMSrefSat_truth,MMS1dV_truth,MMS2dV_truth,MMS3dV_truth,dV4Array_truth, dV1Array_truth, dV2Array_truth, dV3Array_truth, dV4Array_est, dV1Array_est, dV2Array_est, dV3Array_est,origAxialRadialSC,Prop_norm,PropFM_norm,Prop_truth,PropFM_truth,AxialTh1,RadialTh1,TankMMS,tankMassb4Func,tankPressureb4Func,MMSrefSat_Final_Array_Size,Time_MMSrefSat,Aplha_refSatEst,Beta_refSatEst,MMS1dV_Final_Array_Size,Time_MMS1dV,Aplha_1dVEst,Beta_1dVEst,MMS2dV_Final_Array_Size,Time_MMS2dV,Aplha_2dVEst,Beta_2dVEst,MMS3dV_Final_Array_Size,Time_MMS3dV,Aplha_3dVEst,Beta_3dVEst,Aplha_refSatTruth,Beta_refSatTruth,Aplha_1dVTruth,Beta_1dVTruth,Aplha_2dVTruth,Beta_2dVTruth,Aplha_3dVTruth,Beta_3dVTruth,TSFburnFactor_refSatTruth,TSFburnFactor_1dVTruth,TSFburnFactor_2dVTruth,TSFburnFactor_3dVTruth,navErrFlag,navErrType,MCrunNum,ephemFileNameDv,ephemGenFlag,primaryFormFlag,burnTypeFlag,FlagAxialOn,scDutyCycles,numRadThrusters,dVerrTolerance,RAdeg,DECdeg,Start_Time,End_Time,Final_Array,IBurnStart,Index,MMSrefSat_estAftBurn,MMS1dV_estAftBurn,MMS2dV_estAftBurn,MMS3dV_estAftBurn,MMSrefSat_truthAftBurn,MMS1dV_truthAftBurn,MMS2dV_truthAftBurn,MMS3dV_truthAftBurn,EphemDvSC1est,EphemDvSC2est,EphemDvSC3est,EphemDvSC4est,EphemDvSC1truth,EphemDvSC2truth,EphemDvSC3truth,EphemDvSC4truth,refSatIndex)

%   SC Mapping Guide 
%   ---------------------------------------------------------------------------------
%   refSatIndex = 1
%     SC1 = MMSrefSat_* | SC2 = MMS1dV_*    | SC3 = MMS2dV_*    | SC4 = MMS3dV_*
%   refSatIndex = 2
%     SC1 = MMS3dV_*    | SC2 = MMSrefSat_* | SC3 = MMS1dV_*    | SC4 = MMS2dV_*
%   refSatIndex = 3
%     SC1 = MMS2dV_*    | SC2 = MMS3dV_*    | SC3 = MMSrefSat_* | SC4 = MMS1dV_*
%   refSatIndex = 4
%     SC1 = MMS1dV_*    | SC2 = MMS2dV_*    | SC3 = MMS3dV_*    | SC4 = MMSrefSat_*
%
%   Modification History
%   ---------------------------------------------------------------------------------
%   01/06/2010 - E.Dove: Created the first version.
%   01/07/2010 - E.Dove: Added logic to account for a burn that's too small. Prop_norm.
%   01/11/2010 - E.Dove: Added syntax to perform impulsive burn when finite burn is small. Temporary fix.
%   01/13/2010 - E.Dove: Added dutycyle and radial thrusters used as inputs that are based off of the burn parameter matrix
%   01/28/2010 - E.Dove: Added TSF scale factor to apply to maneuver
%   04/27/2010 - E.Dove: Removed the performing of IBurn in this function and instead just pass out Iburn flags
%   05/04/2010 - E.Dove: Load Spin Axis Dec/RA values as function inputs
%   11/15/2010 - J.Long: Added functionality to report finite burns in 10-sec increments


Create Spacecraft MMSrefSat_est;
Create Spacecraft MMS1dV_est;
Create Spacecraft MMS2dV_est;
Create Spacecraft MMS3dV_est;
Create Spacecraft MMSrefSat_truth;
Create Spacecraft MMS1dV_truth;
Create Spacecraft MMS2dV_truth;
Create Spacecraft MMS3dV_truth;

Create ForceModel simpleProp_ForceModel;
GMAT simpleProp_ForceModel.CentralBody = Earth;
GMAT simpleProp_ForceModel.PointMasses = {Earth};

Create Propagator simpleProp;
GMAT simpleProp.FM = simpleProp_ForceModel;
GMAT simpleProp.Type = RungeKutta89;
GMAT simpleProp.InitialStepSize = 60;
GMAT simpleProp.Accuracy = 1e-08;
GMAT simpleProp.MinStep = 60;
GMAT simpleProp.MaxStep = 60;
GMAT simpleProp.MaxStepAttempts = 50;

Create Thruster AxialTh2;
Create Thruster RadialTh2;
Create Thruster RadialTh3;
Create Thruster RadialTh4;
% Configure Thrusters
GMAT AxialTh2  = AxialTh1;
GMAT RadialTh2 = RadialTh1;
GMAT RadialTh3 = RadialTh1;
GMAT RadialTh4 = RadialTh1;

Create Spacecraft GSEconvertSC
GSEconvertSC.CoordinateSystem = EarthGSE;
GSEconvertSC.DateFormat = TAIModJulian;

Create CoordinateSystem EarthGSE;
EarthGSE.Origin         = Earth;
EarthGSE.Axes           = GSE;
EarthGSE.UpdateInterval = 0;

Create FiniteBurn fburn1AxialTh1;
Create FiniteBurn fburn1AxialTh2;
Create FiniteBurn fburn1RadialTh1;
Create FiniteBurn fburn1RadialTh2;
Create FiniteBurn fburn1RadialTh3;
Create FiniteBurn fburn1RadialTh4;
GMAT fburn1AxialTh1.Thrusters  = {AxialTh1};
GMAT fburn1AxialTh2.Thrusters  = {AxialTh2};
GMAT fburn1RadialTh1.Thrusters = {RadialTh1};
GMAT fburn1RadialTh2.Thrusters = {RadialTh2};
GMAT fburn1RadialTh3.Thrusters = {RadialTh3};
GMAT fburn1RadialTh4.Thrusters = {RadialTh4};

Create DifferentialCorrector DCFBurn;
GMAT DCFBurn.ShowProgress = false;
GMAT DCFBurn.ReportStyle = Normal;
GMAT DCFBurn.TargeterTextFile = 'targeter_DCFBurnFuncPos.data';
GMAT DCFBurn.MaximumIterations = 50;

% Arrays used to save the maneuver values
Create Array dV1Array_truth[3,1] dV2Array_truth[3,1] dV3Array_truth[3,1] dV4Array_truth[3,1];
Create Array dV1Array_est[3,1] dV2Array_est[3,1] dV3Array_est[3,1] dV4Array_est[3,1];

% Create variables needed for matlab output
Create Variable saveFlag sc2arrFlag;
Create Variable maneuverCount;
Create Variable oneHourPostPer;
Create Variable currTAIModJulian dummyQ; % (Input to ephem. gen. script)
Create String ephemPath currUTCgregEpoch;
Create String ephemFileNameDvEstSC1 ephemFileNameDvEstSC2 ephemFileNameDvEstSC3 ephemFileNameDvEstSC4 ephemFileNameDvTruthSC1 ephemFileNameDvTruthSC2 ephemFileNameDvTruthSC3 ephemFileNameDvTruthSC4; % Filename of temp ascii ephem report

%%Create MatlabFunction MMSmatlabDataSaves;
Create Array cart1In[6,1] cart2In[6,1] cart3In[6,1] cart4In[6,1];
Create Array cart1Out[6,1] cart2Out[6,1] cart3Out[6,1] cart4Out[6,1]; % Array used to contain Spacecraft states for input/output to Nav GMAT Functions
Create Array postBurnMass_est[4,1] preBurnMass_est[4,1] postBurnMass_truth[4,1] preBurnMass_truth[4,1]; % Mass before and after an impulsive burn
Create Variable DeltaMass_refSatEst DeltaMass_1dVEst DeltaMass_2dVEst DeltaMass_3dVEst;
Create Variable DeltaMass_refSatTruth DeltaMass_1dVTruth DeltaMass_2dVTruth DeltaMass_3dVTruth;
Create Variable TargeterSeed_refSatEst TargeterSeed_1dVEst TargeterSeed_2dVEst TargeterSeed_3dVEst;
Create Variable TargeterSeed_refSatTruth TargeterSeed_1dVTruth TargeterSeed_2dVTruth TargeterSeed_3dVTruth;
Create Variable ThrustRadial_refSatEst ThrustRadial_1dVEst ThrustRadial_2dVEst ThrustRadial_3dVEst;
Create Variable ThrustRadial_refSatTruth ThrustRadial_1dVTruth ThrustRadial_2dVTruth ThrustRadial_3dVTruth;
Create Variable ThrustAxial_refSatEst ThrustAxial_1dVEst ThrustAxial_2dVEst ThrustAxial_3dVEst;
Create Variable ThrustAxial_refSatTruth ThrustAxial_1dVTruth ThrustAxial_2dVTruth ThrustAxial_3dVTruth;
Create Variable Tref_refSatEst Tref_1dVEst Tref_2dVEst Tref_3dVEst;
Create Variable Tref_refSatTruth Tref_1dVTruth Tref_2dVTruth Tref_3dVTruth;
Create Variable TFuel_refSatEst TFuel_1dVEst TFuel_2dVEst TFuel_3dVEst;
Create Variable TFuel_refSatTruth TFuel_1dVTruth TFuel_2dVTruth TFuel_3dVTruth;
Create Variable Pressure_refSatEst Pressure_1dVEst Pressure_2dVEst Pressure_3dVEst;
Create Variable Pressure_refSatTruth Pressure_1dVTruth Pressure_2dVTruth Pressure_3dVTruth;
Create Variable EpochCenter_refSatEst EpochCenter_1dVEst EpochCenter_2dVEst EpochCenter_3dVEst; % TAI ModJulian date epoch values
Create Variable EpochCenter_refSatTruth EpochCenter_1dVTruth EpochCenter_2dVTruth EpochCenter_3dVTruth; % TAI ModJulian date epoch values
Create Variable EpochStart_refSatEst EpochStart_1dVEst EpochStart_2dVEst EpochStart_3dVEst; % TAI ModJulian date epoch values
Create Variable EpochStart_refSatTruth EpochStart_1dVTruth EpochStart_2dVTruth EpochStart_3dVTruth; % TAI ModJulian date epoch values
Create Variable EpochEnd_refSatEst EpochEnd_1dVEst EpochEnd_2dVEst EpochEnd_3dVEst; % TAI ModJulian date epoch values
Create Variable EpochEnd_refSatTruth EpochEnd_1dVTruth EpochEnd_2dVTruth EpochEnd_3dVTruth; % TAI ModJulian date epoch values
Create Variable TargetEpoch_refSatEst TargetEpoch_1dVEst TargetEpoch_2dVEst TargetEpoch_3dVEst; % TAI ModJulian date epoch values
Create Variable TargetEpoch_refSatTruth TargetEpoch_1dVTruth TargetEpoch_2dVTruth TargetEpoch_3dVTruth; % TAI ModJulian date epoch values
Create Variable DutyCycle_refSatEst DutyCycle_1dVEst DutyCycle_2dVEst DutyCycle_3dVEst;
Create Variable DutyCycle_refSatTruth DutyCycle_1dVTruth DutyCycle_2dVTruth DutyCycle_3dVTruth;
Create Variable numRadTh_refSatEst numRadTh_1dVEst numRadTh_2dVEst numRadTh_3dVEst;
Create Variable numRadTh_refSatTruth numRadTh_1dVTruth numRadTh_2dVTruth numRadTh_3dVTruth;
Create Variable  GravConst;
Create Variable RadialTh1C1 RadialTh1C2 RadialTh1C3 RadialTh1C4 RadialTh1C5 RadialTh1C6 RadialTh1C7 RadialTh1C8 RadialTh1C9 RadialTh1C10
Create Variable RadialTh1C11 RadialTh1C12 RadialTh1C13 RadialTh1C14 RadialTh1C15 RadialTh1C16; 
Create Variable BurnDurationTotal;
Create Variable TargeterPert;
Create Variable BurnDurationTotal BurnDurationStep; % In seconds
Create Array zGSEVector[3,1]; % GSE unit vector pointing in the z-direction
Create Array scBodyAttXaxis[3,1] scBodyAttYaxis[3,1] scBodyAttZaxis[3,1]; % MJ2k representation of the SC body axis
Create String filenameSuffix;
Create Variable AxialTh1C1 AxialTh1C2 AxialTh1C3 AxialTh1C4 AxialTh1C5 AxialTh1C6 AxialTh1C7 AxialTh1C8 AxialTh1C9 AxialTh1C10
Create Variable AxialTh1C11 AxialTh1C12 AxialTh1C13 AxialTh1C14 AxialTh1C15 AxialTh1C16; 
Create Variable AxialPercOfMax RadialPercOfMax;
Create Variable RadialComp AxialComp AxialDirection;
Create Array MaxThrustUnitVector[3,1] TargetDeltaVDirection[3,1] TargetDeltaVDirectionBody[3,1];
Create Array TargetVector_refSatEst[3,1] TargetVector_1dVEst[3,1] TargetVector_2dVEst[3,1] TargetVector_3dVEst[3,1];
Create Array TargetVector_refSatTruth[3,1] TargetVector_1dVTruth[3,1] TargetVector_2dVTruth[3,1] TargetVector_3dVTruth[3,1];
Create Variable tempCount;
Create Variable FBstartEpoch_refSatEst FBstopEpoch_refSatEst Aplha_refSatEst Beta_refSatEst;
Create Variable FBstartEpoch_1dVEst FBstopEpoch_1dVEst Aplha_1dVEst Beta_1dVEst;
Create Variable FBstartEpoch_2dVEst FBstopEpoch_2dVEst Aplha_2dVEst Beta_2dVEst;
Create Variable FBstartEpoch_3dVEst FBstopEpoch_3dVEst Aplha_3dVEst Beta_3dVEst;
Create Variable FBstartEpoch_refSatTruth FBstopEpoch_refSatTruth Aplha_refSatTruth Beta_refSatTruth;
Create Variable FBstartEpoch_1dVTruth FBstopEpoch_1dVTruth Aplha_1dVTruth Beta_1dVTruth;
Create Variable FBstartEpoch_2dVTruth FBstopEpoch_2dVTruth Aplha_2dVTruth Beta_2dVTruth;
Create Variable FBstartEpoch_3dVTruth FBstopEpoch_3dVTruth Aplha_3dVTruth Beta_3dVTruth;
Create Variable PerformIBurn_refSatEst PerformIBurn_1dVEst PerformIBurn_2dVEst PerformIBurn_3dVEst;
Create Variable PerformIBurn_refSatTruth PerformIBurn_1dVTruth PerformIBurn_2dVTruth PerformIBurn_3dVTruth;
Create Variable EpochPreFBurns EpochPostFBurns;
Create Array sortedEpochs[16,1];

Create Variable BurnDurationTotal EpochCenter EpochStart EpochEnd
Create Array dvVNB[3,1] VNBTargetDir[3,1] dvDirVNB[3,1] MJ2kTargetDir[3,1] TargetVector[3,1] AcheiveDiff[3,1];
Create Variable fromCSflag toCSflag;
Create Variable ThrustRadialSC ThrustAxialSC;

Create Variable AxialPercOfMax RadialPercOfMax;
Create Variable RadialComp AxialComp AxialDirection;

Create Variable Beta1Orig Beta1 Alpha1Orig Alpha1 Prop_Done PropTimeLeft TargetEpoch TargetX TargetY TargetZ; 
Create Variable Burn2Epoch BurnDurationStep BurnDuration BurnCurrent SCequalEpochFlag SCequalStatesFlag atan2deg1 atan2deg2;
Create Variable InitEpochStart DeltaMass  GravConst dvMag;
Create Variable pi deg2rad rad2deg newTankMass newTankPressure;
Create Variable preManeuverMass postManeuverMass estDeltaMass estDeltaMassAxial estDeltaMassRadial estDeltaMassTotal actualDeltaMassTotal actualDeltaMass;
Create Variable IspAxial IspRadial firstBurnPass;

Create Variable EarthRadius EarthMu targetRadius currRefSCTA currPhaseTAtarget missTargetFlag stoppingCondEpoch propDirection;
Create Array currPhaseFlag[2,1] currPhaseTAorRe[2,1];

Create Variable currFuelMass currPressure;
Create String IB2FBrptName;

Create Array tankMassAftFunc[8,1] tankPressureAftFunc[8,1]; % Tank Mass and Pressure just before entering into the PerformMaintenanceManeuvers GMAT function. 1-4 est 5-8 truth

Create Variable tempCount;
Create Variable TargeterSeed TargeterSeed_refSatTruth TargeterSeed_1dVTruth TargeterSeed_2dVTruth TargeterSeed_3dVTruth 
Create Variable TargeterPert BurnDurationTotal
Create Variable EpochCenter EpochStart EpochEnd
Create Array scSpinAxisGSE[3,1] zGSEVector[3,1] scSpinAxisMJ2k[3,1] scBiNormAxisMJ2k[3,1] scPosMJ2k[3,1] scVelMJ2k[3,1] 
Create Array scBodyAttXaxis[3,1] scBodyAttYaxis[3,1] scBodyAttZaxis[3,1]

Create Array dvVNB[3,1] VNBTargetDir[3,1] dvDirVNB[3,1] MJ2kTargetDir[3,1] TargetVector[3,1] AcheiveDiff[3,1];
Create Variable fromCSflag toCSflag;
Create Variable ThrustRadialSC ThrustAxialSC TFuel Tref Pressure;

Create Variable AxialPercOfMax RadialPercOfMax FlagAxialOn;
Create Variable RadialComp AxialComp AxialDirection;

Create Array MaxThrustUnitVector[3,1] TargetDeltaVDirectionBody[3,1];

Create Variable Beta1Orig Beta1 Alpha1Orig Alpha1 Prop_Done PropTimeLeft TargetEpoch TargetX TargetY TargetZ; 
Create Variable Burn2Epoch BurnDurationStep BurnDuration BurnCurrent SCequalEpochFlag SCequalStatesFlag atan2deg1 atan2deg2 asindeg;
Create Variable InitEpochStart DeltaMass  GravConst dvMag;
Create Variable pi deg2rad rad2deg newTankMass newTankPressure;
Create Variable preManeuverMass postManeuverMass estDeltaMass estDeltaMassAxial estDeltaMassRadial estDeltaMassTotal actualDeltaMassTotal actualDeltaMass;
Create Variable IspAxial IspRadial numSteps4Burn numSteps4BurnCheck loop count countWhile;

Create Variable Prop2Epoch

% Variables used in former functions
Create Array SCposVector[3,1] SCvelVector[3,1];
Create Array M2ktoVNBrotMat[3,3] intermVec1[3,1] intermVec2[3,1] intermVec3[3,1]; % Arrays used to construct rotation Matrix
Create Array scSpinAxisGSE[3,1] scSpinAxisMJ2k[3,1]
Create Array rotMatRA[3,3] rotMatDEC[3,3];
Create Variable magVector currSCepoch;
Create Variable RadialComp AxialComp;
Create Variable TotalAxialThrust TotalRadialThrust;
Create Array ConvertMatrix[3,3]
Create Variable JulianNum numThrustersUsed;

%%Create MatlabFunction MMSephemMerge;
%%Create MatlabFunction GenEphemSaveInfo;

Create Variable i j k l FBurn_Index IBurn_Index FBurnEnd_Index EpochStart EpochEnd Dummy_Variable EpochStartSec EpochEndSec;
Create Array Dummy_Array[1000,1];
Create Variable Upper Lower;
Create String Test;
Create String msg;

Create ReportFile TestFile;
%%GMAT TestFile.Filename         = '.\output\TestFile.report';
GMAT TestFile.Filename         = 'Bug2230_TestFile.report';
GMAT TestFile.WriteHeaders     = On;

Create ReportFile TestFile2;
%%GMAT TestFile2.Filename         = '.\output\TestFile2.report';
GMAT TestFile2.Filename         = 'Bug2230_TestFile2.report';
GMAT TestFile2.WriteHeaders     = On;

Create ReportFile FBurnDebugRpt;
%%GMAT FBurnDebugRpt.Filename         = '.\output\FBurnDebugRptPos.report';
GMAT FBurnDebugRpt.Filename         = 'Bug2230_FBurnDebugRptPos.report';
GMAT FBurnDebugRpt.WriteHeaders     = On;

% %**************************************************************************
% %**************************The Mission Sequence****************************
% %**************************************************************************

BeginScript;
EndScript;

DutyCycle_refSatEst   = scDutyCycles(1,1);
DutyCycle_1dVEst      = scDutyCycles(2,1);
DutyCycle_2dVEst      = scDutyCycles(3,1);
DutyCycle_3dVEst      = scDutyCycles(4,1);
DutyCycle_refSatTruth = scDutyCycles(5,1);
DutyCycle_1dVTruth    = scDutyCycles(6,1);
DutyCycle_2dVTruth    = scDutyCycles(7,1);
DutyCycle_3dVTruth    = scDutyCycles(8,1);

MMSrefSat_est.TankMMS.FuelMass   = tankMassb4Func(1,1);
MMS1dV_est.TankMMS.FuelMass      = tankMassb4Func(2,1);
MMS2dV_est.TankMMS.FuelMass      = tankMassb4Func(3,1);
MMS3dV_est.TankMMS.FuelMass      = tankMassb4Func(4,1);
MMSrefSat_truth.TankMMS.FuelMass = tankMassb4Func(5,1);
MMS1dV_truth.TankMMS.FuelMass    = tankMassb4Func(6,1);
MMS2dV_truth.TankMMS.FuelMass    = tankMassb4Func(7,1);
MMS3dV_truth.TankMMS.FuelMass    = tankMassb4Func(8,1);

MMSrefSat_est.TankMMS.Pressure   = tankPressureb4Func(1,1);
MMS1dV_est.TankMMS.Pressure      = tankPressureb4Func(2,1);
MMS2dV_est.TankMMS.Pressure      = tankPressureb4Func(3,1);
MMS3dV_est.TankMMS.Pressure      = tankPressureb4Func(4,1);
MMSrefSat_truth.TankMMS.Pressure = tankPressureb4Func(5,1);
MMS1dV_truth.TankMMS.Pressure    = tankPressureb4Func(6,1);
MMS2dV_truth.TankMMS.Pressure    = tankPressureb4Func(7,1);
MMS3dV_truth.TankMMS.Pressure    = tankPressureb4Func(8,1);

%Part of Bug workaround
Report FBurnDebugRpt origAxialRadialSC.AxialTh1.DutyCycle origAxialRadialSC.AxialTh1.ThrustScaleFactor origAxialRadialSC.RadialTh1.DutyCycle origAxialRadialSC.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.AxialTh1.ThrustDirection1 MMSrefSat_est.AxialTh1.ThrustDirection2 MMSrefSat_est.AxialTh1.ThrustDirection3 MMSrefSat_est.AxialTh1.DutyCycle MMSrefSat_est.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.AxialTh2.ThrustDirection1 MMSrefSat_est.AxialTh2.ThrustDirection2 MMSrefSat_est.AxialTh2.ThrustDirection3 MMSrefSat_est.AxialTh2.DutyCycle MMSrefSat_est.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.RadialTh1.ThrustDirection1 MMSrefSat_est.RadialTh1.ThrustDirection2 MMSrefSat_est.RadialTh1.ThrustDirection3 MMSrefSat_est.RadialTh1.DutyCycle MMSrefSat_est.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.RadialTh2.ThrustDirection1 MMSrefSat_est.RadialTh2.ThrustDirection2 MMSrefSat_est.RadialTh2.ThrustDirection3 MMSrefSat_est.RadialTh2.DutyCycle MMSrefSat_est.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.RadialTh3.ThrustDirection1 MMSrefSat_est.RadialTh3.ThrustDirection2 MMSrefSat_est.RadialTh3.ThrustDirection3 MMSrefSat_est.RadialTh3.DutyCycle MMSrefSat_est.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_est.RadialTh4.ThrustDirection1 MMSrefSat_est.RadialTh4.ThrustDirection2 MMSrefSat_est.RadialTh4.ThrustDirection3 MMSrefSat_est.RadialTh4.DutyCycle MMSrefSat_est.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS1dV_est.AxialTh1.ThrustDirection1 MMS1dV_est.AxialTh1.ThrustDirection2 MMS1dV_est.AxialTh1.ThrustDirection3 MMS1dV_est.AxialTh1.DutyCycle MMS1dV_est.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_est.AxialTh2.ThrustDirection1 MMS1dV_est.AxialTh2.ThrustDirection2 MMS1dV_est.AxialTh2.ThrustDirection3 MMS1dV_est.AxialTh2.DutyCycle MMS1dV_est.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_est.RadialTh1.ThrustDirection1 MMS1dV_est.RadialTh1.ThrustDirection2 MMS1dV_est.RadialTh1.ThrustDirection3 MMS1dV_est.RadialTh1.DutyCycle MMS1dV_est.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_est.RadialTh2.ThrustDirection1 MMS1dV_est.RadialTh2.ThrustDirection2 MMS1dV_est.RadialTh2.ThrustDirection3 MMS1dV_est.RadialTh2.DutyCycle MMS1dV_est.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_est.RadialTh3.ThrustDirection1 MMS1dV_est.RadialTh3.ThrustDirection2 MMS1dV_est.RadialTh3.ThrustDirection3 MMS1dV_est.RadialTh3.DutyCycle MMS1dV_est.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_est.RadialTh4.ThrustDirection1 MMS1dV_est.RadialTh4.ThrustDirection2 MMS1dV_est.RadialTh4.ThrustDirection3 MMS1dV_est.RadialTh4.DutyCycle MMS1dV_est.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS2dV_est.AxialTh1.ThrustDirection1 MMS2dV_est.AxialTh1.ThrustDirection2 MMS2dV_est.AxialTh1.ThrustDirection3 MMS2dV_est.AxialTh1.DutyCycle MMS2dV_est.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_est.AxialTh2.ThrustDirection1 MMS2dV_est.AxialTh2.ThrustDirection2 MMS2dV_est.AxialTh2.ThrustDirection3 MMS2dV_est.AxialTh2.DutyCycle MMS2dV_est.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_est.RadialTh1.ThrustDirection1 MMS2dV_est.RadialTh1.ThrustDirection2 MMS2dV_est.RadialTh1.ThrustDirection3 MMS2dV_est.RadialTh1.DutyCycle MMS2dV_est.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_est.RadialTh2.ThrustDirection1 MMS2dV_est.RadialTh2.ThrustDirection2 MMS2dV_est.RadialTh2.ThrustDirection3 MMS2dV_est.RadialTh2.DutyCycle MMS2dV_est.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_est.RadialTh3.ThrustDirection1 MMS2dV_est.RadialTh3.ThrustDirection2 MMS2dV_est.RadialTh3.ThrustDirection3 MMS2dV_est.RadialTh3.DutyCycle MMS2dV_est.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_est.RadialTh4.ThrustDirection1 MMS2dV_est.RadialTh4.ThrustDirection2 MMS2dV_est.RadialTh4.ThrustDirection3 MMS2dV_est.RadialTh4.DutyCycle MMS2dV_est.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS3dV_est.AxialTh1.ThrustDirection1 MMS3dV_est.AxialTh1.ThrustDirection2 MMS3dV_est.AxialTh1.ThrustDirection3 MMS3dV_est.AxialTh1.DutyCycle MMS3dV_est.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_est.AxialTh2.ThrustDirection1 MMS3dV_est.AxialTh2.ThrustDirection2 MMS3dV_est.AxialTh2.ThrustDirection3 MMS3dV_est.AxialTh2.DutyCycle MMS3dV_est.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_est.RadialTh1.ThrustDirection1 MMS3dV_est.RadialTh1.ThrustDirection2 MMS3dV_est.RadialTh1.ThrustDirection3 MMS3dV_est.RadialTh1.DutyCycle MMS3dV_est.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_est.RadialTh2.ThrustDirection1 MMS3dV_est.RadialTh2.ThrustDirection2 MMS3dV_est.RadialTh2.ThrustDirection3 MMS3dV_est.RadialTh2.DutyCycle MMS3dV_est.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_est.RadialTh3.ThrustDirection1 MMS3dV_est.RadialTh3.ThrustDirection2 MMS3dV_est.RadialTh3.ThrustDirection3 MMS3dV_est.RadialTh3.DutyCycle MMS3dV_est.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_est.RadialTh4.ThrustDirection1 MMS3dV_est.RadialTh4.ThrustDirection2 MMS3dV_est.RadialTh4.ThrustDirection3 MMS3dV_est.RadialTh4.DutyCycle MMS3dV_est.RadialTh4.ThrustScaleFactor	

Report FBurnDebugRpt MMSrefSat_truth.AxialTh1.ThrustDirection1 MMSrefSat_truth.AxialTh1.ThrustDirection2 MMSrefSat_truth.AxialTh1.ThrustDirection3 MMSrefSat_truth.AxialTh1.DutyCycle MMSrefSat_truth.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_truth.AxialTh2.ThrustDirection1 MMSrefSat_truth.AxialTh2.ThrustDirection2 MMSrefSat_truth.AxialTh2.ThrustDirection3 MMSrefSat_truth.AxialTh2.DutyCycle MMSrefSat_truth.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_truth.RadialTh1.ThrustDirection1 MMSrefSat_truth.RadialTh1.ThrustDirection2 MMSrefSat_truth.RadialTh1.ThrustDirection3 MMSrefSat_truth.RadialTh1.DutyCycle MMSrefSat_truth.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_truth.RadialTh2.ThrustDirection1 MMSrefSat_truth.RadialTh2.ThrustDirection2 MMSrefSat_truth.RadialTh2.ThrustDirection3 MMSrefSat_truth.RadialTh2.DutyCycle MMSrefSat_truth.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_truth.RadialTh3.ThrustDirection1 MMSrefSat_truth.RadialTh3.ThrustDirection2 MMSrefSat_truth.RadialTh3.ThrustDirection3 MMSrefSat_truth.RadialTh3.DutyCycle MMSrefSat_truth.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMSrefSat_truth.RadialTh4.ThrustDirection1 MMSrefSat_truth.RadialTh4.ThrustDirection2 MMSrefSat_truth.RadialTh4.ThrustDirection3 MMSrefSat_truth.RadialTh4.DutyCycle MMSrefSat_truth.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS1dV_truth.AxialTh1.ThrustDirection1 MMS1dV_truth.AxialTh1.ThrustDirection2 MMS1dV_truth.AxialTh1.ThrustDirection3 MMS1dV_truth.AxialTh1.DutyCycle MMS1dV_truth.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_truth.AxialTh2.ThrustDirection1 MMS1dV_truth.AxialTh2.ThrustDirection2 MMS1dV_truth.AxialTh2.ThrustDirection3 MMS1dV_truth.AxialTh2.DutyCycle MMS1dV_truth.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_truth.RadialTh1.ThrustDirection1 MMS1dV_truth.RadialTh1.ThrustDirection2 MMS1dV_truth.RadialTh1.ThrustDirection3 MMS1dV_truth.RadialTh1.DutyCycle MMS1dV_truth.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_truth.RadialTh2.ThrustDirection1 MMS1dV_truth.RadialTh2.ThrustDirection2 MMS1dV_truth.RadialTh2.ThrustDirection3 MMS1dV_truth.RadialTh2.DutyCycle MMS1dV_truth.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_truth.RadialTh3.ThrustDirection1 MMS1dV_truth.RadialTh3.ThrustDirection2 MMS1dV_truth.RadialTh3.ThrustDirection3 MMS1dV_truth.RadialTh3.DutyCycle MMS1dV_truth.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS1dV_truth.RadialTh4.ThrustDirection1 MMS1dV_truth.RadialTh4.ThrustDirection2 MMS1dV_truth.RadialTh4.ThrustDirection3 MMS1dV_truth.RadialTh4.DutyCycle MMS1dV_truth.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS2dV_truth.AxialTh1.ThrustDirection1 MMS2dV_truth.AxialTh1.ThrustDirection2 MMS2dV_truth.AxialTh1.ThrustDirection3 MMS2dV_truth.AxialTh1.DutyCycle MMS2dV_truth.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_truth.AxialTh2.ThrustDirection1 MMS2dV_truth.AxialTh2.ThrustDirection2 MMS2dV_truth.AxialTh2.ThrustDirection3 MMS2dV_truth.AxialTh2.DutyCycle MMS2dV_truth.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_truth.RadialTh1.ThrustDirection1 MMS2dV_truth.RadialTh1.ThrustDirection2 MMS2dV_truth.RadialTh1.ThrustDirection3 MMS2dV_truth.RadialTh1.DutyCycle MMS2dV_truth.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_truth.RadialTh2.ThrustDirection1 MMS2dV_truth.RadialTh2.ThrustDirection2 MMS2dV_truth.RadialTh2.ThrustDirection3 MMS2dV_truth.RadialTh2.DutyCycle MMS2dV_truth.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_truth.RadialTh3.ThrustDirection1 MMS2dV_truth.RadialTh3.ThrustDirection2 MMS2dV_truth.RadialTh3.ThrustDirection3 MMS2dV_truth.RadialTh3.DutyCycle MMS2dV_truth.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS2dV_truth.RadialTh4.ThrustDirection1 MMS2dV_truth.RadialTh4.ThrustDirection2 MMS2dV_truth.RadialTh4.ThrustDirection3 MMS2dV_truth.RadialTh4.DutyCycle MMS2dV_truth.RadialTh4.ThrustScaleFactor	
Report FBurnDebugRpt MMS3dV_truth.AxialTh1.ThrustDirection1 MMS3dV_truth.AxialTh1.ThrustDirection2 MMS3dV_truth.AxialTh1.ThrustDirection3 MMS3dV_truth.AxialTh1.DutyCycle MMS3dV_truth.AxialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_truth.AxialTh2.ThrustDirection1 MMS3dV_truth.AxialTh2.ThrustDirection2 MMS3dV_truth.AxialTh2.ThrustDirection3 MMS3dV_truth.AxialTh2.DutyCycle MMS3dV_truth.AxialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_truth.RadialTh1.ThrustDirection1 MMS3dV_truth.RadialTh1.ThrustDirection2 MMS3dV_truth.RadialTh1.ThrustDirection3 MMS3dV_truth.RadialTh1.DutyCycle MMS3dV_truth.RadialTh1.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_truth.RadialTh2.ThrustDirection1 MMS3dV_truth.RadialTh2.ThrustDirection2 MMS3dV_truth.RadialTh2.ThrustDirection3 MMS3dV_truth.RadialTh2.DutyCycle MMS3dV_truth.RadialTh2.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_truth.RadialTh3.ThrustDirection1 MMS3dV_truth.RadialTh3.ThrustDirection2 MMS3dV_truth.RadialTh3.ThrustDirection3 MMS3dV_truth.RadialTh3.DutyCycle MMS3dV_truth.RadialTh3.ThrustScaleFactor
Report FBurnDebugRpt MMS3dV_truth.RadialTh4.ThrustDirection1 MMS3dV_truth.RadialTh4.ThrustDirection2 MMS3dV_truth.RadialTh4.ThrustDirection3 MMS3dV_truth.RadialTh4.DutyCycle MMS3dV_truth.RadialTh4.ThrustScaleFactor		

% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;


Report FBurnDebugRpt FBstartEpoch_refSatEst FBstopEpoch_refSatEst Aplha_refSatEst Beta_refSatEst MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ;
Report FBurnDebugRpt FBstartEpoch_1dVEst    FBstopEpoch_1dVEst    Aplha_1dVEst    Beta_1dVEst MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ;
Report FBurnDebugRpt FBstartEpoch_2dVEst    FBstopEpoch_2dVEst    Aplha_2dVEst    Beta_2dVEst MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ;
Report FBurnDebugRpt FBstartEpoch_3dVEst    FBstopEpoch_3dVEst    Aplha_3dVEst    Beta_3dVEst MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ;

Report FBurnDebugRpt FBstartEpoch_refSatTruth FBstopEpoch_refSatTruth Aplha_refSatTruth Beta_refSatTruth MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ;	
Report FBurnDebugRpt FBstartEpoch_1dVTruth FBstopEpoch_1dVTruth Aplha_1dVTruth Beta_1dVTruth MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ;
Report FBurnDebugRpt FBstartEpoch_2dVTruth FBstopEpoch_2dVTruth Aplha_2dVTruth Beta_2dVTruth MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ;
Report FBurnDebugRpt FBstartEpoch_3dVTruth FBstopEpoch_3dVTruth Aplha_3dVTruth Beta_3dVTruth MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ;

% Report FBurnDebugRpt RAdeg DECdeg

Report TestFile2 Start_Time End_Time

% Initialize misc variables
GMAT pi               = 3.14159265358979;
GMAT deg2rad          = pi/180;
GMAT rad2deg          = 1/deg2rad;
GMAT zGSEVector(1,1)  = 0;
GMAT zGSEVector(2,1)  = 0;
GMAT zGSEVector(3,1)  = 1;
GMAT GravConst        = 9.81;
GMAT BurnDurationStep = 10;
GMAT PerformIBurn_refSatEst   = 0;
GMAT PerformIBurn_1dVEst      = 0;
GMAT PerformIBurn_2dVEst      = 0;
GMAT PerformIBurn_3dVEst      = 0;
GMAT PerformIBurn_refSatTruth = 0;
GMAT PerformIBurn_1dVTruth    = 0;
GMAT PerformIBurn_2dVTruth    = 0;
GMAT PerformIBurn_3dVTruth    = 0;

% Perform All Finite Burns
% ~~ BEGIN FINITE BURN FOR SC - refSat_truth	
BurnDurationTotal = abs(Time_MMSrefSat(1,1)-Time_MMSrefSat(MMSrefSat_Final_Array_Size,1));
Beta1             = Beta_refSatTruth;
Alpha1            = Aplha_refSatTruth;
EpochCenter       = EpochCenter_refSatTruth;
EpochStart        = (Time_MMSrefSat(1,1)/86400)+Start_Time;
EpochEnd          = (Time_MMSrefSat(MMSrefSat_Final_Array_Size,1)/86400)+Start_Time;
numThrustersUsed  = numRadThrusters(5,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal

Test = 'MMSrefSat_truth'
Report TestFile Test


If EpochStart == EpochEnd

        msg = '------------------------------ EpochStart == EpochEnd';
        Report TestFile msg EpochStart EpochEnd;

	PerformIBurn_refSatTruth = 1;	
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
	    If Final_Array(i,1) == IBurnStart
		IBurn_Index = i
	    EndIf	
	EndFor	
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Start_Time}
	Report TestFile IBurn_Index i
        msg = '------------------------------ now at For i = 1:1:IBurn_Index';
        Report TestFile msg;

	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
		
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
        msg = '------------------------------ now at For i = IBurn_Index:Index';
        Report TestFile msg IBurn_Index Index;

	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
	
	EndFor			

        msg = '------------------------------ end of For i = IBurn_Index:Index';
        Report TestFile msg i IBurn_Index Index;

Else


msg = '------------------------------ EpochStart != EpochEnd';
Report TestFile msg EpochStart EpochEnd

% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMSrefSat_truth.RadialTh1.C1 + MMSrefSat_truth.RadialTh1.C2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.RadialTh1.C3 + MMSrefSat_truth.RadialTh1.C4*MMSrefSat_truth.TankMMS.Pressure + ...
   MMSrefSat_truth.RadialTh1.C5*MMSrefSat_truth.TankMMS.Pressure^2 + MMSrefSat_truth.RadialTh1.C6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C7 + MMSrefSat_truth.RadialTh1.C8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C9 + ...
   MMSrefSat_truth.RadialTh1.C10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C11 + MMSrefSat_truth.RadialTh1.C12*MMSrefSat_truth.RadialTh1.C13^(MMSrefSat_truth.RadialTh1.C14*MMSrefSat_truth.TankMMS.Pressure))* ... 
   (MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1 + MMSrefSat_truth.RadialTh1.C15 + MMSrefSat_truth.RadialTh1.C16*MMSrefSat_truth.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(5,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMSrefSat_truth.AxialTh1.C1 + MMSrefSat_truth.AxialTh1.C2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.AxialTh1.C3 + MMSrefSat_truth.AxialTh1.C4*MMSrefSat_truth.TankMMS.Pressure + ...
		MMSrefSat_truth.AxialTh1.C5*MMSrefSat_truth.TankMMS.Pressure^2 + MMSrefSat_truth.AxialTh1.C6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C7 + MMSrefSat_truth.AxialTh1.C8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C9 + ...
		MMSrefSat_truth.AxialTh1.C10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C11 + MMSrefSat_truth.AxialTh1.C12*MMSrefSat_truth.AxialTh1.C13^(MMSrefSat_truth.AxialTh1.C14*MMSrefSat_truth.TankMMS.Pressure))* ... 
		(MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1 + MMSrefSat_truth.AxialTh1.C15 + MMSrefSat_truth.AxialTh1.C16*MMSrefSat_truth.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  


msg = '------------------------------ now stop';
Report TestFile msg;
Stop;



% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMSrefSat_truth.TAIModJulian BurnDurationTotal FBstopEpoch_refSatTruth FBstartEpoch_refSatTruth 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
EpochStartSec = abs(Start_Time-EpochStart)*86400;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
	EndIf	
EndFor

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart	
If EpochStart > Start_Time
	Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Start_Time}
EndIf	

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMSrefSat_truth,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMSrefSat_truth.X;
	SCposVector(2,1) = MMSrefSat_truth.Y;
	SCposVector(3,1) = MMSrefSat_truth.Z;
	SCvelVector(1,1) = MMSrefSat_truth.VX;
	SCvelVector(2,1) = MMSrefSat_truth.VY;
	SCvelVector(3,1) = MMSrefSat_truth.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMSrefSat_truth,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMSrefSat_truth.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMSrefSat_truth.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMSrefSat_truth.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMSrefSat_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh1.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMSrefSat_truth.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;
GMAT MMSrefSat_truth.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMSrefSat_truth.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMSrefSat_truth.AxialTh2.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMSrefSat_truth.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;	
GMAT MMSrefSat_truth.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_truth.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_truth.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_truth.RadialTh1.DutyCycle        = scDutyCycles(5,1)*RadialPercOfMax;
GMAT MMSrefSat_truth.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;
GMAT MMSrefSat_truth.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_truth.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_truth.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_truth.RadialTh2.DutyCycle        = scDutyCycles(5,1)*RadialPercOfMax;
GMAT MMSrefSat_truth.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;
GMAT MMSrefSat_truth.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_truth.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_truth.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_truth.RadialTh3.DutyCycle        = scDutyCycles(5,1)*RadialPercOfMax;
GMAT MMSrefSat_truth.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;
GMAT MMSrefSat_truth.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_truth.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_truth.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_truth.RadialTh4.DutyCycle        = scDutyCycles(5,1)*RadialPercOfMax;
GMAT MMSrefSat_truth.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_refSatTruth;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMSrefSat_truth.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMSrefSat_truth.TotalMass;

GMAT ThrustRadialSC   = (MMSrefSat_truth.RadialTh1.C1 + MMSrefSat_truth.RadialTh1.C2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.RadialTh1.C3 + MMSrefSat_truth.RadialTh1.C4*MMSrefSat_truth.TankMMS.Pressure + ...
   MMSrefSat_truth.RadialTh1.C5*MMSrefSat_truth.TankMMS.Pressure^2 + MMSrefSat_truth.RadialTh1.C6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C7 + MMSrefSat_truth.RadialTh1.C8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C9 + ...
   MMSrefSat_truth.RadialTh1.C10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.C11 + MMSrefSat_truth.RadialTh1.C12*MMSrefSat_truth.RadialTh1.C13^(MMSrefSat_truth.RadialTh1.C14*MMSrefSat_truth.TankMMS.Pressure))* ... 
   (MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1 + MMSrefSat_truth.RadialTh1.C15 + MMSrefSat_truth.RadialTh1.C16*MMSrefSat_truth.TankMMS.Pressure))* ...
   MMSrefSat_truth.RadialTh1.ThrustScaleFactor*MMSrefSat_truth.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMSrefSat_truth.AxialTh1.C1 + MMSrefSat_truth.AxialTh1.C2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.AxialTh1.C3 + MMSrefSat_truth.AxialTh1.C4*MMSrefSat_truth.TankMMS.Pressure + ...
		MMSrefSat_truth.AxialTh1.C5*MMSrefSat_truth.TankMMS.Pressure^2 + MMSrefSat_truth.AxialTh1.C6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C7 + MMSrefSat_truth.AxialTh1.C8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C9 + ...
		MMSrefSat_truth.AxialTh1.C10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.C11 + MMSrefSat_truth.AxialTh1.C12*MMSrefSat_truth.AxialTh1.C13^(MMSrefSat_truth.AxialTh1.C14*MMSrefSat_truth.TankMMS.Pressure))* ... 
		(MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1 + MMSrefSat_truth.AxialTh1.C15 + MMSrefSat_truth.AxialTh1.C16*MMSrefSat_truth.TankMMS.Pressure))* ...
		MMSrefSat_truth.AxialTh1.ThrustScaleFactor*MMSrefSat_truth.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMSrefSat_truth.AxialTh1.K1 + MMSrefSat_truth.AxialTh1.K2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.AxialTh1.K3+MMSrefSat_truth.AxialTh1.K4*MMSrefSat_truth.TankMMS.Pressure+MMSrefSat_truth.AxialTh1.K5*MMSrefSat_truth.TankMMS.Pressure^2+ ...
	MMSrefSat_truth.AxialTh1.K6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.K7 +MMSrefSat_truth.AxialTh1.K8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.K9+MMSrefSat_truth.AxialTh1.K10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.AxialTh1.K11+ ...
	MMSrefSat_truth.AxialTh1.K12*MMSrefSat_truth.AxialTh1.K13^(MMSrefSat_truth.AxialTh1.K14*MMSrefSat_truth.TankMMS.Pressure))*(MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1+MMSrefSat_truth.AxialTh1.K15+MMSrefSat_truth.AxialTh1.K16*MMSrefSat_truth.TankMMS.Pressure);

IspRadial = MMSrefSat_truth.RadialTh1.K1 + MMSrefSat_truth.RadialTh1.K2*MMSrefSat_truth.TankMMS.Pressure + (MMSrefSat_truth.RadialTh1.K3+MMSrefSat_truth.RadialTh1.K4*MMSrefSat_truth.TankMMS.Pressure+MMSrefSat_truth.RadialTh1.K5*MMSrefSat_truth.TankMMS.Pressure^2+ ...
	MMSrefSat_truth.RadialTh1.K6*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.K7 +MMSrefSat_truth.RadialTh1.K8*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.K9+MMSrefSat_truth.RadialTh1.K10*MMSrefSat_truth.TankMMS.Pressure^MMSrefSat_truth.RadialTh1.K11+ ...
	MMSrefSat_truth.RadialTh1.K12*MMSrefSat_truth.RadialTh1.K13^(MMSrefSat_truth.RadialTh1.K14*MMSrefSat_truth.TankMMS.Pressure))*(MMSrefSat_truth.TankMMS.Temperature/MMSrefSat_truth.TankMMS.RefTemperature)^(1+MMSrefSat_truth.RadialTh1.K15+MMSrefSat_truth.RadialTh1.K16*MMSrefSat_truth.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMSrefSat_truth)
BeginFiniteBurn fburn1AxialTh2(MMSrefSat_truth)
BeginFiniteBurn fburn1RadialTh1(MMSrefSat_truth)
BeginFiniteBurn fburn1RadialTh2(MMSrefSat_truth)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMSrefSat_truth)
	BeginFiniteBurn fburn1RadialTh4(MMSrefSat_truth)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMSrefSat_truth.TAIModJulian + BurnDuration/86400;

For i = 1:1:MMSrefSat_Final_Array_Size
	Dummy_Array(i,1) = Time_MMSrefSat(i,1)/(86400) + Start_Time;
EndFor

For i = 2:1:MMSrefSat_Final_Array_Size
	Burn2Epoch = Dummy_Array(i,1);
	Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Burn2Epoch}
	Report TestFile i Burn2Epoch MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMSrefSat_truth)
EndFiniteBurn fburn1AxialTh2(MMSrefSat_truth)
EndFiniteBurn fburn1RadialTh1(MMSrefSat_truth)
EndFiniteBurn fburn1RadialTh2(MMSrefSat_truth)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMSrefSat_truth)
	EndFiniteBurn fburn1RadialTh4(MMSrefSat_truth)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMSrefSat_truth) {MMSrefSat_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4truth MMSrefSat_truth.UTCGregorian MMSrefSat_truth.TAIModJulian MMSrefSat_truth.X MMSrefSat_truth.Y MMSrefSat_truth.Z MMSrefSat_truth.VX MMSrefSat_truth.VY MMSrefSat_truth.VZ MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMSrefSat_truth.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMSrefSat_truth.TankMMS.FuelMass = MMSrefSat_truth.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf
% ~~ END FINITE BURN FOR SC - refSat_truth
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 1dV_truth	
BurnDurationTotal = abs(Time_MMS1dV(MMS1dV_Final_Array_Size,1)-Time_MMS1dV(1,1));  
Beta1             = Beta_1dVTruth;                                                                                  
Alpha1            = Aplha_1dVTruth;                                                                                  
EpochCenter       = EpochCenter_1dVTruth;
EpochStart        = (Time_MMS1dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS1dV(MMS1dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(6,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS1dV_truth'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_1dVTruth    = 1;
		
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Start_Time} 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile i Burn2Epoch MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS1dV_truth.RadialTh1.C1 + MMS1dV_truth.RadialTh1.C2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.RadialTh1.C3 + MMS1dV_truth.RadialTh1.C4*MMS1dV_truth.TankMMS.Pressure + ...
   MMS1dV_truth.RadialTh1.C5*MMS1dV_truth.TankMMS.Pressure^2 + MMS1dV_truth.RadialTh1.C6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C7 + MMS1dV_truth.RadialTh1.C8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C9 + ...
   MMS1dV_truth.RadialTh1.C10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C11 + MMS1dV_truth.RadialTh1.C12*MMS1dV_truth.RadialTh1.C13^(MMS1dV_truth.RadialTh1.C14*MMS1dV_truth.TankMMS.Pressure))* ... 
   (MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1 + MMS1dV_truth.RadialTh1.C15 + MMS1dV_truth.RadialTh1.C16*MMS1dV_truth.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(6,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS1dV_truth.AxialTh1.C1 + MMS1dV_truth.AxialTh1.C2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.AxialTh1.C3 + MMS1dV_truth.AxialTh1.C4*MMS1dV_truth.TankMMS.Pressure + ...
		MMS1dV_truth.AxialTh1.C5*MMS1dV_truth.TankMMS.Pressure^2 + MMS1dV_truth.AxialTh1.C6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C7 + MMS1dV_truth.AxialTh1.C8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C9 + ...
		MMS1dV_truth.AxialTh1.C10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C11 + MMS1dV_truth.AxialTh1.C12*MMS1dV_truth.AxialTh1.C13^(MMS1dV_truth.AxialTh1.C14*MMS1dV_truth.TankMMS.Pressure))* ... 
		(MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1 + MMS1dV_truth.AxialTh1.C15 + MMS1dV_truth.AxialTh1.C16*MMS1dV_truth.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS1dV_truth.TAIModJulian BurnDurationTotal FBstopEpoch_1dVTruth FBstartEpoch_1dVTruth 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn

%Determine at which point EpochStart occurs in the indexing
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	Report TestFile2 Final_Array(i,1) EpochStartSec
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index
	EndIf	
EndFor	
%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart		
If EpochStart > Start_Time
	Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Start_Time}
	
	Report TestFile i FBurn_Index
	
	For i = 1:1:FBurn_Index
	
		Report TestFile i FBurn_Index
		
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Burn2Epoch}
		
		Report TestFile Burn2Epoch MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure
		
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	EndFor
EndIf

Stop;

If EpochStart == Start_Time
	Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS1dV_truth,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS1dV_truth.X;
	SCposVector(2,1) = MMS1dV_truth.Y;
	SCposVector(3,1) = MMS1dV_truth.Z;
	SCvelVector(1,1) = MMS1dV_truth.VX;
	SCvelVector(2,1) = MMS1dV_truth.VY;
	SCvelVector(3,1) = MMS1dV_truth.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS1dV_truth,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS1dV_truth.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS1dV_truth.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS1dV_truth.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS1dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh1.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS1dV_truth.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;
GMAT MMS1dV_truth.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS1dV_truth.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS1dV_truth.AxialTh2.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS1dV_truth.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;
GMAT MMS1dV_truth.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_truth.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_truth.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_truth.RadialTh1.DutyCycle        = scDutyCycles(6,1)*RadialPercOfMax;
GMAT MMS1dV_truth.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;
GMAT MMS1dV_truth.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_truth.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_truth.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_truth.RadialTh2.DutyCycle        = scDutyCycles(6,1)*RadialPercOfMax;
GMAT MMS1dV_truth.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;
GMAT MMS1dV_truth.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_truth.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_truth.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_truth.RadialTh3.DutyCycle        = scDutyCycles(6,1)*RadialPercOfMax;
GMAT MMS1dV_truth.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;
GMAT MMS1dV_truth.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_truth.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_truth.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_truth.RadialTh4.DutyCycle        = scDutyCycles(6,1)*RadialPercOfMax;
GMAT MMS1dV_truth.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_1dVTruth;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS1dV_truth.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS1dV_truth.TotalMass;

GMAT ThrustRadialSC   = (MMS1dV_truth.RadialTh1.C1 + MMS1dV_truth.RadialTh1.C2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.RadialTh1.C3 + MMS1dV_truth.RadialTh1.C4*MMS1dV_truth.TankMMS.Pressure + ...
   MMS1dV_truth.RadialTh1.C5*MMS1dV_truth.TankMMS.Pressure^2 + MMS1dV_truth.RadialTh1.C6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C7 + MMS1dV_truth.RadialTh1.C8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C9 + ...
   MMS1dV_truth.RadialTh1.C10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.C11 + MMS1dV_truth.RadialTh1.C12*MMS1dV_truth.RadialTh1.C13^(MMS1dV_truth.RadialTh1.C14*MMS1dV_truth.TankMMS.Pressure))* ... 
   (MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1 + MMS1dV_truth.RadialTh1.C15 + MMS1dV_truth.RadialTh1.C16*MMS1dV_truth.TankMMS.Pressure))* ...
   MMS1dV_truth.RadialTh1.ThrustScaleFactor*MMS1dV_truth.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS1dV_truth.AxialTh1.C1 + MMS1dV_truth.AxialTh1.C2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.AxialTh1.C3 + MMS1dV_truth.AxialTh1.C4*MMS1dV_truth.TankMMS.Pressure + ...
		MMS1dV_truth.AxialTh1.C5*MMS1dV_truth.TankMMS.Pressure^2 + MMS1dV_truth.AxialTh1.C6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C7 + MMS1dV_truth.AxialTh1.C8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C9 + ...
		MMS1dV_truth.AxialTh1.C10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.C11 + MMS1dV_truth.AxialTh1.C12*MMS1dV_truth.AxialTh1.C13^(MMS1dV_truth.AxialTh1.C14*MMS1dV_truth.TankMMS.Pressure))* ... 
		(MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1 + MMS1dV_truth.AxialTh1.C15 + MMS1dV_truth.AxialTh1.C16*MMS1dV_truth.TankMMS.Pressure))* ...
		MMS1dV_truth.AxialTh1.ThrustScaleFactor*MMS1dV_truth.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS1dV_truth.AxialTh1.K1 + MMS1dV_truth.AxialTh1.K2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.AxialTh1.K3+MMS1dV_truth.AxialTh1.K4*MMS1dV_truth.TankMMS.Pressure+MMS1dV_truth.AxialTh1.K5*MMS1dV_truth.TankMMS.Pressure^2+ ...
	MMS1dV_truth.AxialTh1.K6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.K7 +MMS1dV_truth.AxialTh1.K8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.K9+MMS1dV_truth.AxialTh1.K10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.AxialTh1.K11+ ...
	MMS1dV_truth.AxialTh1.K12*MMS1dV_truth.AxialTh1.K13^(MMS1dV_truth.AxialTh1.K14*MMS1dV_truth.TankMMS.Pressure))*(MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1+MMS1dV_truth.AxialTh1.K15+MMS1dV_truth.AxialTh1.K16*MMS1dV_truth.TankMMS.Pressure);

IspRadial = MMS1dV_truth.RadialTh1.K1 + MMS1dV_truth.RadialTh1.K2*MMS1dV_truth.TankMMS.Pressure + (MMS1dV_truth.RadialTh1.K3+MMS1dV_truth.RadialTh1.K4*MMS1dV_truth.TankMMS.Pressure+MMS1dV_truth.RadialTh1.K5*MMS1dV_truth.TankMMS.Pressure^2+ ...
	MMS1dV_truth.RadialTh1.K6*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.K7 +MMS1dV_truth.RadialTh1.K8*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.K9+MMS1dV_truth.RadialTh1.K10*MMS1dV_truth.TankMMS.Pressure^MMS1dV_truth.RadialTh1.K11+ ...
	MMS1dV_truth.RadialTh1.K12*MMS1dV_truth.RadialTh1.K13^(MMS1dV_truth.RadialTh1.K14*MMS1dV_truth.TankMMS.Pressure))*(MMS1dV_truth.TankMMS.Temperature/MMS1dV_truth.TankMMS.RefTemperature)^(1+MMS1dV_truth.RadialTh1.K15+MMS1dV_truth.RadialTh1.K16*MMS1dV_truth.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS1dV_truth)
BeginFiniteBurn fburn1AxialTh2(MMS1dV_truth)
BeginFiniteBurn fburn1RadialTh1(MMS1dV_truth)
BeginFiniteBurn fburn1RadialTh2(MMS1dV_truth)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS1dV_truth)
	BeginFiniteBurn fburn1RadialTh4(MMS1dV_truth)
EndIf


% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS1dV_truth.TAIModJulian + BurnDuration/86400

For i = 1:1:MMS1dV_Final_Array_Size
	Dummy_Array(i,1) = Time_MMS1dV(i,1)/(86400) + Start_Time
EndFor

For i = 2:1:MMS1dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(i,1)
	Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Burn2Epoch}
	
		Report TestFile Burn2Epoch MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS1dV_truth)
EndFiniteBurn fburn1AxialTh2(MMS1dV_truth)
EndFiniteBurn fburn1RadialTh1(MMS1dV_truth)
EndFiniteBurn fburn1RadialTh2(MMS1dV_truth)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS1dV_truth)
	EndFiniteBurn fburn1RadialTh4(MMS1dV_truth)
EndIf


%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	Report TestFile2 FBurnEnd_Index Index
	FBurnEnd_Index = FBurnEnd_Index + 1;
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS1dV_truth) {MMS1dV_truth.TAIModJulian = Burn2Epoch}
		
		Report TestFile Burn2Epoch MMS1dV_truth.TAIModJulian MMS1dV_truth.X MMS1dV_truth.Y MMS1dV_truth.Z MMS1dV_truth.VX MMS1dV_truth.VY MMS1dV_truth.VZ MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1truth MMS1dV_truth.UTCGregorian    MMS1dV_truth.TAIModJulian    MMS1dV_truth.X    MMS1dV_truth.Y    MMS1dV_truth.Z    MMS1dV_truth.VX    MMS1dV_truth.VY    MMS1dV_truth.VZ    MMS1dV_truth.TankMMS.FuelMass    MMS1dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS1dV_truth.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS1dV_truth.TankMMS.FuelMass = MMS1dV_truth.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 1dV_truth
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 2dV_truth	
BurnDurationTotal = abs(Time_MMS2dV(MMS2dV_Final_Array_Size,1)-Time_MMS2dV(1,1));  
Beta1             = Beta_2dVTruth;                                                                                  
Alpha1            = Aplha_2dVTruth;                                                                                  
EpochCenter       = EpochCenter_2dVTruth;
EpochStart        = (Time_MMS2dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS2dV(MMS2dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(7,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS2dV_truth'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_2dVTruth    = 1;
		
	%Determine at which point the IBurnStart occurs in the indexing
	
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
		IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Start_Time}	 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS2dV_truth)  {MMS2dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	

Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS2dV_truth.RadialTh1.C1 + MMS2dV_truth.RadialTh1.C2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.RadialTh1.C3 + MMS2dV_truth.RadialTh1.C4*MMS2dV_truth.TankMMS.Pressure + ...
   MMS2dV_truth.RadialTh1.C5*MMS2dV_truth.TankMMS.Pressure^2 + MMS2dV_truth.RadialTh1.C6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C7 + MMS2dV_truth.RadialTh1.C8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C9 + ...
   MMS2dV_truth.RadialTh1.C10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C11 + MMS2dV_truth.RadialTh1.C12*MMS2dV_truth.RadialTh1.C13^(MMS2dV_truth.RadialTh1.C14*MMS2dV_truth.TankMMS.Pressure))* ... 
   (MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1 + MMS2dV_truth.RadialTh1.C15 + MMS2dV_truth.RadialTh1.C16*MMS2dV_truth.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(7,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS2dV_truth.AxialTh1.C1 + MMS2dV_truth.AxialTh1.C2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.AxialTh1.C3 + MMS2dV_truth.AxialTh1.C4*MMS2dV_truth.TankMMS.Pressure + ...
		MMS2dV_truth.AxialTh1.C5*MMS2dV_truth.TankMMS.Pressure^2 + MMS2dV_truth.AxialTh1.C6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C7 + MMS2dV_truth.AxialTh1.C8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C9 + ...
		MMS2dV_truth.AxialTh1.C10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C11 + MMS2dV_truth.AxialTh1.C12*MMS2dV_truth.AxialTh1.C13^(MMS2dV_truth.AxialTh1.C14*MMS2dV_truth.TankMMS.Pressure))* ... 
		(MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1 + MMS2dV_truth.AxialTh1.C15 + MMS2dV_truth.AxialTh1.C16*MMS2dV_truth.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS2dV_truth.TAIModJulian BurnDurationTotal FBstopEpoch_2dVTruth FBstartEpoch_2dVTruth 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	Report TestFile2 Final_Array(i,1) EpochStartSec
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index 
	EndIf	
EndFor	
 
%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart		
If EpochStart > Start_Time	
	Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Start_Time}
EndIf
	
% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS2dV_truth,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS2dV_truth.X;
	SCposVector(2,1) = MMS2dV_truth.Y;
	SCposVector(3,1) = MMS2dV_truth.Z;
	SCvelVector(1,1) = MMS2dV_truth.VX;
	SCvelVector(2,1) = MMS2dV_truth.VY;
	SCvelVector(3,1) = MMS2dV_truth.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS2dV_truth,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS2dV_truth.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS2dV_truth.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS2dV_truth.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS2dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh1.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS2dV_truth.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;
GMAT MMS2dV_truth.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS2dV_truth.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS2dV_truth.AxialTh2.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS2dV_truth.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;	
GMAT MMS2dV_truth.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_truth.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_truth.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_truth.RadialTh1.DutyCycle        = scDutyCycles(7,1)*RadialPercOfMax;
GMAT MMS2dV_truth.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;
GMAT MMS2dV_truth.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_truth.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_truth.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_truth.RadialTh2.DutyCycle        = scDutyCycles(7,1)*RadialPercOfMax;
GMAT MMS2dV_truth.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;
GMAT MMS2dV_truth.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_truth.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_truth.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_truth.RadialTh3.DutyCycle        = scDutyCycles(7,1)*RadialPercOfMax;
GMAT MMS2dV_truth.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;
GMAT MMS2dV_truth.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_truth.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_truth.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_truth.RadialTh4.DutyCycle        = scDutyCycles(7,1)*RadialPercOfMax;
GMAT MMS2dV_truth.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_2dVTruth;
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS2dV_truth.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS2dV_truth.TotalMass;

GMAT ThrustRadialSC   = (MMS2dV_truth.RadialTh1.C1 + MMS2dV_truth.RadialTh1.C2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.RadialTh1.C3 + MMS2dV_truth.RadialTh1.C4*MMS2dV_truth.TankMMS.Pressure + ...
   MMS2dV_truth.RadialTh1.C5*MMS2dV_truth.TankMMS.Pressure^2 + MMS2dV_truth.RadialTh1.C6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C7 + MMS2dV_truth.RadialTh1.C8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C9 + ...
   MMS2dV_truth.RadialTh1.C10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.C11 + MMS2dV_truth.RadialTh1.C12*MMS2dV_truth.RadialTh1.C13^(MMS2dV_truth.RadialTh1.C14*MMS2dV_truth.TankMMS.Pressure))* ... 
   (MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1 + MMS2dV_truth.RadialTh1.C15 + MMS2dV_truth.RadialTh1.C16*MMS2dV_truth.TankMMS.Pressure))* ...
   MMS2dV_truth.RadialTh1.ThrustScaleFactor*MMS2dV_truth.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS2dV_truth.AxialTh1.C1 + MMS2dV_truth.AxialTh1.C2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.AxialTh1.C3 + MMS2dV_truth.AxialTh1.C4*MMS2dV_truth.TankMMS.Pressure + ...
		MMS2dV_truth.AxialTh1.C5*MMS2dV_truth.TankMMS.Pressure^2 + MMS2dV_truth.AxialTh1.C6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C7 + MMS2dV_truth.AxialTh1.C8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C9 + ...
		MMS2dV_truth.AxialTh1.C10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.C11 + MMS2dV_truth.AxialTh1.C12*MMS2dV_truth.AxialTh1.C13^(MMS2dV_truth.AxialTh1.C14*MMS2dV_truth.TankMMS.Pressure))* ... 
		(MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1 + MMS2dV_truth.AxialTh1.C15 + MMS2dV_truth.AxialTh1.C16*MMS2dV_truth.TankMMS.Pressure))* ...
		MMS2dV_truth.AxialTh1.ThrustScaleFactor*MMS2dV_truth.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS2dV_truth.AxialTh1.K1 + MMS2dV_truth.AxialTh1.K2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.AxialTh1.K3+MMS2dV_truth.AxialTh1.K4*MMS2dV_truth.TankMMS.Pressure+MMS2dV_truth.AxialTh1.K5*MMS2dV_truth.TankMMS.Pressure^2+ ...
	MMS2dV_truth.AxialTh1.K6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.K7 +MMS2dV_truth.AxialTh1.K8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.K9+MMS2dV_truth.AxialTh1.K10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.AxialTh1.K11+ ...
	MMS2dV_truth.AxialTh1.K12*MMS2dV_truth.AxialTh1.K13^(MMS2dV_truth.AxialTh1.K14*MMS2dV_truth.TankMMS.Pressure))*(MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1+MMS2dV_truth.AxialTh1.K15+MMS2dV_truth.AxialTh1.K16*MMS2dV_truth.TankMMS.Pressure);

IspRadial = MMS2dV_truth.RadialTh1.K1 + MMS2dV_truth.RadialTh1.K2*MMS2dV_truth.TankMMS.Pressure + (MMS2dV_truth.RadialTh1.K3+MMS2dV_truth.RadialTh1.K4*MMS2dV_truth.TankMMS.Pressure+MMS2dV_truth.RadialTh1.K5*MMS2dV_truth.TankMMS.Pressure^2+ ...
	MMS2dV_truth.RadialTh1.K6*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.K7 +MMS2dV_truth.RadialTh1.K8*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.K9+MMS2dV_truth.RadialTh1.K10*MMS2dV_truth.TankMMS.Pressure^MMS2dV_truth.RadialTh1.K11+ ...
	MMS2dV_truth.RadialTh1.K12*MMS2dV_truth.RadialTh1.K13^(MMS2dV_truth.RadialTh1.K14*MMS2dV_truth.TankMMS.Pressure))*(MMS2dV_truth.TankMMS.Temperature/MMS2dV_truth.TankMMS.RefTemperature)^(1+MMS2dV_truth.RadialTh1.K15+MMS2dV_truth.RadialTh1.K16*MMS2dV_truth.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS2dV_truth)
BeginFiniteBurn fburn1AxialTh2(MMS2dV_truth)
BeginFiniteBurn fburn1RadialTh1(MMS2dV_truth)
BeginFiniteBurn fburn1RadialTh2(MMS2dV_truth)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS2dV_truth)
	BeginFiniteBurn fburn1RadialTh4(MMS2dV_truth)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS2dV_truth.TAIModJulian + BurnDuration/86400;

For k = 1:1:MMS2dV_Final_Array_Size
	Dummy_Array(k,1) = Time_MMS2dV(k,1)/(86400) + Start_Time;
EndFor

Report TestFile2 MMS2dV_truth.TAIModJulian MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure;

For i = 2:1:MMS2dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(i,1);
	Report TestFile2 Burn2Epoch MMS2dV_truth.TAIModJulian 
	Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS2dV_truth)
EndFiniteBurn fburn1AxialTh2(MMS2dV_truth)
EndFiniteBurn fburn1RadialTh1(MMS2dV_truth)
EndFiniteBurn fburn1RadialTh2(MMS2dV_truth)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS2dV_truth)
	EndFiniteBurn fburn1RadialTh4(MMS2dV_truth)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS2dV_truth) {MMS2dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_truth.TAIModJulian MMS2dV_truth.X MMS2dV_truth.Y MMS2dV_truth.Z MMS2dV_truth.VX MMS2dV_truth.VY MMS2dV_truth.VZ MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2truth MMS2dV_truth.UTCGregorian    MMS2dV_truth.TAIModJulian    MMS2dV_truth.X    MMS2dV_truth.Y    MMS2dV_truth.Z    MMS2dV_truth.VX    MMS2dV_truth.VY    MMS2dV_truth.VZ    MMS2dV_truth.TankMMS.FuelMass    MMS2dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS2dV_truth.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS2dV_truth.TankMMS.FuelMass = MMS2dV_truth.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 2dV_truth
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 3dV_truth	
BurnDurationTotal = abs(Time_MMS3dV(MMS3dV_Final_Array_Size,1)-Time_MMS3dV(1,1));  
Beta1             = Beta_3dVTruth;                                                                                  
Alpha1            = Aplha_3dVTruth;                                                                                  
EpochCenter       = EpochCenter_3dVTruth;
EpochStart        = (Time_MMS3dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS3dV(MMS3dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(8,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS3dV_truth'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_3dVTruth    = 1;
		
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Start_Time} 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS3dV_truth.RadialTh1.C1 + MMS3dV_truth.RadialTh1.C2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.RadialTh1.C3 + MMS3dV_truth.RadialTh1.C4*MMS3dV_truth.TankMMS.Pressure + ...
   MMS3dV_truth.RadialTh1.C5*MMS3dV_truth.TankMMS.Pressure^2 + MMS3dV_truth.RadialTh1.C6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C7 + MMS3dV_truth.RadialTh1.C8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C9 + ...
   MMS3dV_truth.RadialTh1.C10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C11 + MMS3dV_truth.RadialTh1.C12*MMS3dV_truth.RadialTh1.C13^(MMS3dV_truth.RadialTh1.C14*MMS3dV_truth.TankMMS.Pressure))* ... 
   (MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1 + MMS3dV_truth.RadialTh1.C15 + MMS3dV_truth.RadialTh1.C16*MMS3dV_truth.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(8,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS3dV_truth.AxialTh1.C1 + MMS3dV_truth.AxialTh1.C2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.AxialTh1.C3 + MMS3dV_truth.AxialTh1.C4*MMS3dV_truth.TankMMS.Pressure + ...
		MMS3dV_truth.AxialTh1.C5*MMS3dV_truth.TankMMS.Pressure^2 + MMS3dV_truth.AxialTh1.C6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C7 + MMS3dV_truth.AxialTh1.C8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C9 + ...
		MMS3dV_truth.AxialTh1.C10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C11 + MMS3dV_truth.AxialTh1.C12*MMS3dV_truth.AxialTh1.C13^(MMS3dV_truth.AxialTh1.C14*MMS3dV_truth.TankMMS.Pressure))* ... 
		(MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1 + MMS3dV_truth.AxialTh1.C15 + MMS3dV_truth.AxialTh1.C16*MMS3dV_truth.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS3dV_truth.TAIModJulian BurnDurationTotal FBstopEpoch_3dVTruth FBstartEpoch_3dVTruth 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
 
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	Report TestFile2 Final_Array(i,1) EpochStartSec
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index
	EndIf	
EndFor	

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart		
If EpochStart > Start_Time
	Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS3dV_truth,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS3dV_truth.X;
	SCposVector(2,1) = MMS3dV_truth.Y;
	SCposVector(3,1) = MMS3dV_truth.Z;
	SCvelVector(1,1) = MMS3dV_truth.VX;
	SCvelVector(2,1) = MMS3dV_truth.VY;
	SCvelVector(3,1) = MMS3dV_truth.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS3dV_truth,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS3dV_truth.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS3dV_truth.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS3dV_truth.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS3dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh1.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS3dV_truth.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;
GMAT MMS3dV_truth.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS3dV_truth.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS3dV_truth.AxialTh2.DutyCycle        = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS3dV_truth.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;	
GMAT MMS3dV_truth.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_truth.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_truth.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_truth.RadialTh1.DutyCycle        = scDutyCycles(8,1)*RadialPercOfMax;
GMAT MMS3dV_truth.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;
GMAT MMS3dV_truth.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_truth.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_truth.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_truth.RadialTh2.DutyCycle        = scDutyCycles(8,1)*RadialPercOfMax;
GMAT MMS3dV_truth.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;
GMAT MMS3dV_truth.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_truth.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_truth.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_truth.RadialTh3.DutyCycle        = scDutyCycles(8,1)*RadialPercOfMax;
GMAT MMS3dV_truth.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;
GMAT MMS3dV_truth.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_truth.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_truth.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_truth.RadialTh4.DutyCycle        = scDutyCycles(8,1)*RadialPercOfMax;
GMAT MMS3dV_truth.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor*TSFburnFactor_3dVTruth;
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS3dV_truth.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS3dV_truth.TotalMass;

GMAT ThrustRadialSC   = (MMS3dV_truth.RadialTh1.C1 + MMS3dV_truth.RadialTh1.C2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.RadialTh1.C3 + MMS3dV_truth.RadialTh1.C4*MMS3dV_truth.TankMMS.Pressure + ...
   MMS3dV_truth.RadialTh1.C5*MMS3dV_truth.TankMMS.Pressure^2 + MMS3dV_truth.RadialTh1.C6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C7 + MMS3dV_truth.RadialTh1.C8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C9 + ...
   MMS3dV_truth.RadialTh1.C10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.C11 + MMS3dV_truth.RadialTh1.C12*MMS3dV_truth.RadialTh1.C13^(MMS3dV_truth.RadialTh1.C14*MMS3dV_truth.TankMMS.Pressure))* ... 
   (MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1 + MMS3dV_truth.RadialTh1.C15 + MMS3dV_truth.RadialTh1.C16*MMS3dV_truth.TankMMS.Pressure))* ...
   MMS3dV_truth.RadialTh1.ThrustScaleFactor*MMS3dV_truth.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS3dV_truth.AxialTh1.C1 + MMS3dV_truth.AxialTh1.C2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.AxialTh1.C3 + MMS3dV_truth.AxialTh1.C4*MMS3dV_truth.TankMMS.Pressure + ...
		MMS3dV_truth.AxialTh1.C5*MMS3dV_truth.TankMMS.Pressure^2 + MMS3dV_truth.AxialTh1.C6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C7 + MMS3dV_truth.AxialTh1.C8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C9 + ...
		MMS3dV_truth.AxialTh1.C10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.C11 + MMS3dV_truth.AxialTh1.C12*MMS3dV_truth.AxialTh1.C13^(MMS3dV_truth.AxialTh1.C14*MMS3dV_truth.TankMMS.Pressure))* ... 
		(MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1 + MMS3dV_truth.AxialTh1.C15 + MMS3dV_truth.AxialTh1.C16*MMS3dV_truth.TankMMS.Pressure))* ...
		MMS3dV_truth.AxialTh1.ThrustScaleFactor*MMS3dV_truth.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS3dV_truth.AxialTh1.K1 + MMS3dV_truth.AxialTh1.K2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.AxialTh1.K3+MMS3dV_truth.AxialTh1.K4*MMS3dV_truth.TankMMS.Pressure+MMS3dV_truth.AxialTh1.K5*MMS3dV_truth.TankMMS.Pressure^2+ ...
	MMS3dV_truth.AxialTh1.K6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.K7 +MMS3dV_truth.AxialTh1.K8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.K9+MMS3dV_truth.AxialTh1.K10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.AxialTh1.K11+ ...
	MMS3dV_truth.AxialTh1.K12*MMS3dV_truth.AxialTh1.K13^(MMS3dV_truth.AxialTh1.K14*MMS3dV_truth.TankMMS.Pressure))*(MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1+MMS3dV_truth.AxialTh1.K15+MMS3dV_truth.AxialTh1.K16*MMS3dV_truth.TankMMS.Pressure);

IspRadial = MMS3dV_truth.RadialTh1.K1 + MMS3dV_truth.RadialTh1.K2*MMS3dV_truth.TankMMS.Pressure + (MMS3dV_truth.RadialTh1.K3+MMS3dV_truth.RadialTh1.K4*MMS3dV_truth.TankMMS.Pressure+MMS3dV_truth.RadialTh1.K5*MMS3dV_truth.TankMMS.Pressure^2+ ...
	MMS3dV_truth.RadialTh1.K6*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.K7 +MMS3dV_truth.RadialTh1.K8*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.K9+MMS3dV_truth.RadialTh1.K10*MMS3dV_truth.TankMMS.Pressure^MMS3dV_truth.RadialTh1.K11+ ...
	MMS3dV_truth.RadialTh1.K12*MMS3dV_truth.RadialTh1.K13^(MMS3dV_truth.RadialTh1.K14*MMS3dV_truth.TankMMS.Pressure))*(MMS3dV_truth.TankMMS.Temperature/MMS3dV_truth.TankMMS.RefTemperature)^(1+MMS3dV_truth.RadialTh1.K15+MMS3dV_truth.RadialTh1.K16*MMS3dV_truth.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS3dV_truth)
BeginFiniteBurn fburn1AxialTh2(MMS3dV_truth)
BeginFiniteBurn fburn1RadialTh1(MMS3dV_truth)
BeginFiniteBurn fburn1RadialTh2(MMS3dV_truth)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS3dV_truth)
	BeginFiniteBurn fburn1RadialTh4(MMS3dV_truth)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS3dV_truth.TAIModJulian + BurnDuration/86400;
Report TestFile2 Burn2Epoch

For l = 1:1:MMS3dV_Final_Array_Size
	Dummy_Array(l,1) = Time_MMS3dV(l,1)/(86400) + Start_Time;
EndFor

For l = 2:1:MMS3dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(l,1);
	Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS3dV_truth)
EndFiniteBurn fburn1AxialTh2(MMS3dV_truth)
EndFiniteBurn fburn1RadialTh1(MMS3dV_truth)
EndFiniteBurn fburn1RadialTh2(MMS3dV_truth)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS3dV_truth)
	EndFiniteBurn fburn1RadialTh4(MMS3dV_truth)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_truth(MMS3dV_truth) {MMS3dV_truth.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_truth.TAIModJulian MMS3dV_truth.X MMS3dV_truth.Y MMS3dV_truth.Z MMS3dV_truth.VX MMS3dV_truth.VY MMS3dV_truth.VZ MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3truth MMS3dV_truth.UTCGregorian    MMS3dV_truth.TAIModJulian    MMS3dV_truth.X    MMS3dV_truth.Y    MMS3dV_truth.Z    MMS3dV_truth.VX    MMS3dV_truth.VY    MMS3dV_truth.VZ    MMS3dV_truth.TankMMS.FuelMass    MMS3dV_truth.TankMMS.Pressure    dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS3dV_truth.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS3dV_truth.TankMMS.FuelMass = MMS3dV_truth.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 3dV_truth
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - refSat_est	
BurnDurationTotal = abs(Time_MMSrefSat(1,1)-Time_MMSrefSat(MMSrefSat_Final_Array_Size,1));
Beta1             = Beta_refSatEst;
Alpha1            = Aplha_refSatEst;
EpochCenter       = EpochCenter_refSatEst;
EpochStart        = (Time_MMSrefSat(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMSrefSat(MMSrefSat_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(1,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMSrefSat_est'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_refSatEst   = 1;	
	
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Start_Time} 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;

	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
		
	EndFor	

Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMSrefSat_est.RadialTh1.C1 + MMSrefSat_est.RadialTh1.C2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.RadialTh1.C3 + MMSrefSat_est.RadialTh1.C4*MMSrefSat_est.TankMMS.Pressure + ...
   MMSrefSat_est.RadialTh1.C5*MMSrefSat_est.TankMMS.Pressure^2 + MMSrefSat_est.RadialTh1.C6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C7 + MMSrefSat_est.RadialTh1.C8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C9 + ...
   MMSrefSat_est.RadialTh1.C10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C11 + MMSrefSat_est.RadialTh1.C12*MMSrefSat_est.RadialTh1.C13^(MMSrefSat_est.RadialTh1.C14*MMSrefSat_est.TankMMS.Pressure))* ... 
   (MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1 + MMSrefSat_est.RadialTh1.C15 + MMSrefSat_est.RadialTh1.C16*MMSrefSat_est.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(1,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMSrefSat_est.AxialTh1.C1 + MMSrefSat_est.AxialTh1.C2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.AxialTh1.C3 + MMSrefSat_est.AxialTh1.C4*MMSrefSat_est.TankMMS.Pressure + ...
		MMSrefSat_est.AxialTh1.C5*MMSrefSat_est.TankMMS.Pressure^2 + MMSrefSat_est.AxialTh1.C6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C7 + MMSrefSat_est.AxialTh1.C8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C9 + ...
		MMSrefSat_est.AxialTh1.C10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C11 + MMSrefSat_est.AxialTh1.C12*MMSrefSat_est.AxialTh1.C13^(MMSrefSat_est.AxialTh1.C14*MMSrefSat_est.TankMMS.Pressure))* ... 
		(MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1 + MMSrefSat_est.AxialTh1.C15 + MMSrefSat_est.AxialTh1.C16*MMSrefSat_est.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMSrefSat_est.TAIModJulian BurnDurationTotal FBstopEpoch_refSatEst FBstartEpoch_refSatEst 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing

 
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	Report TestFile2 Final_Array(i,1) EpochStartSec
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index
	EndIf	
EndFor	

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart		
If EpochStart > Start_Time
	Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
		
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMSrefSat_est,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMSrefSat_est.X;
	SCposVector(2,1) = MMSrefSat_est.Y;
	SCposVector(3,1) = MMSrefSat_est.Z;
	SCvelVector(1,1) = MMSrefSat_est.VX;
	SCvelVector(2,1) = MMSrefSat_est.VY;
	SCvelVector(3,1) = MMSrefSat_est.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMSrefSat_est,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMSrefSat_est.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMSrefSat_est.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMSrefSat_est.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMSrefSat_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh1.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMSrefSat_est.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;		
GMAT MMSrefSat_est.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMSrefSat_est.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMSrefSat_est.AxialTh2.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMSrefSat_est.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;	
GMAT MMSrefSat_est.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_est.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_est.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_est.RadialTh1.DutyCycle = scDutyCycles(1,1)*RadialPercOfMax;
GMAT MMSrefSat_est.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMSrefSat_est.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_est.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_est.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_est.RadialTh2.DutyCycle = scDutyCycles(1,1)*RadialPercOfMax;
GMAT MMSrefSat_est.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMSrefSat_est.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_est.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_est.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_est.RadialTh3.DutyCycle = scDutyCycles(1,1)*RadialPercOfMax;
GMAT MMSrefSat_est.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMSrefSat_est.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMSrefSat_est.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMSrefSat_est.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMSrefSat_est.RadialTh4.DutyCycle = scDutyCycles(1,1)*RadialPercOfMax;
GMAT MMSrefSat_est.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMSrefSat_est.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMSrefSat_est.TotalMass;

GMAT ThrustRadialSC   = (MMSrefSat_est.RadialTh1.C1 + MMSrefSat_est.RadialTh1.C2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.RadialTh1.C3 + MMSrefSat_est.RadialTh1.C4*MMSrefSat_est.TankMMS.Pressure + ...
   MMSrefSat_est.RadialTh1.C5*MMSrefSat_est.TankMMS.Pressure^2 + MMSrefSat_est.RadialTh1.C6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C7 + MMSrefSat_est.RadialTh1.C8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C9 + ...
   MMSrefSat_est.RadialTh1.C10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.C11 + MMSrefSat_est.RadialTh1.C12*MMSrefSat_est.RadialTh1.C13^(MMSrefSat_est.RadialTh1.C14*MMSrefSat_est.TankMMS.Pressure))* ... 
   (MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1 + MMSrefSat_est.RadialTh1.C15 + MMSrefSat_est.RadialTh1.C16*MMSrefSat_est.TankMMS.Pressure))* ...
   MMSrefSat_est.RadialTh1.ThrustScaleFactor*MMSrefSat_est.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMSrefSat_est.AxialTh1.C1 + MMSrefSat_est.AxialTh1.C2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.AxialTh1.C3 + MMSrefSat_est.AxialTh1.C4*MMSrefSat_est.TankMMS.Pressure + ...
		MMSrefSat_est.AxialTh1.C5*MMSrefSat_est.TankMMS.Pressure^2 + MMSrefSat_est.AxialTh1.C6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C7 + MMSrefSat_est.AxialTh1.C8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C9 + ...
		MMSrefSat_est.AxialTh1.C10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.C11 + MMSrefSat_est.AxialTh1.C12*MMSrefSat_est.AxialTh1.C13^(MMSrefSat_est.AxialTh1.C14*MMSrefSat_est.TankMMS.Pressure))* ... 
		(MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1 + MMSrefSat_est.AxialTh1.C15 + MMSrefSat_est.AxialTh1.C16*MMSrefSat_est.TankMMS.Pressure))* ...
		MMSrefSat_est.AxialTh1.ThrustScaleFactor*MMSrefSat_est.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMSrefSat_est.AxialTh1.K1 + MMSrefSat_est.AxialTh1.K2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.AxialTh1.K3+MMSrefSat_est.AxialTh1.K4*MMSrefSat_est.TankMMS.Pressure+MMSrefSat_est.AxialTh1.K5*MMSrefSat_est.TankMMS.Pressure^2+ ...
	MMSrefSat_est.AxialTh1.K6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.K7 +MMSrefSat_est.AxialTh1.K8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.K9+MMSrefSat_est.AxialTh1.K10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.AxialTh1.K11+ ...
	MMSrefSat_est.AxialTh1.K12*MMSrefSat_est.AxialTh1.K13^(MMSrefSat_est.AxialTh1.K14*MMSrefSat_est.TankMMS.Pressure))*(MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1+MMSrefSat_est.AxialTh1.K15+MMSrefSat_est.AxialTh1.K16*MMSrefSat_est.TankMMS.Pressure);

IspRadial = MMSrefSat_est.RadialTh1.K1 + MMSrefSat_est.RadialTh1.K2*MMSrefSat_est.TankMMS.Pressure + (MMSrefSat_est.RadialTh1.K3+MMSrefSat_est.RadialTh1.K4*MMSrefSat_est.TankMMS.Pressure+MMSrefSat_est.RadialTh1.K5*MMSrefSat_est.TankMMS.Pressure^2+ ...
	MMSrefSat_est.RadialTh1.K6*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.K7 +MMSrefSat_est.RadialTh1.K8*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.K9+MMSrefSat_est.RadialTh1.K10*MMSrefSat_est.TankMMS.Pressure^MMSrefSat_est.RadialTh1.K11+ ...
	MMSrefSat_est.RadialTh1.K12*MMSrefSat_est.RadialTh1.K13^(MMSrefSat_est.RadialTh1.K14*MMSrefSat_est.TankMMS.Pressure))*(MMSrefSat_est.TankMMS.Temperature/MMSrefSat_est.TankMMS.RefTemperature)^(1+MMSrefSat_est.RadialTh1.K15+MMSrefSat_est.RadialTh1.K16*MMSrefSat_est.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMSrefSat_est)
BeginFiniteBurn fburn1AxialTh2(MMSrefSat_est)
BeginFiniteBurn fburn1RadialTh1(MMSrefSat_est)
BeginFiniteBurn fburn1RadialTh2(MMSrefSat_est)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMSrefSat_est)
	BeginFiniteBurn fburn1RadialTh4(MMSrefSat_est)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMSrefSat_est.TAIModJulian + BurnDuration/86400;

For i = 1:1:MMSrefSat_Final_Array_Size
	Dummy_Array(i,1) = Time_MMSrefSat(i,1)/(86400) + Start_Time;
EndFor

For i = 2:1:MMSrefSat_Final_Array_Size
	Burn2Epoch = Dummy_Array(i,1);
	Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMSrefSat_est)
EndFiniteBurn fburn1AxialTh2(MMSrefSat_est)
EndFiniteBurn fburn1RadialTh1(MMSrefSat_est)
EndFiniteBurn fburn1RadialTh2(MMSrefSat_est)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMSrefSat_est)
	EndFiniteBurn fburn1RadialTh4(MMSrefSat_est)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMSrefSat_est) {MMSrefSat_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMSrefSat_est.TAIModJulian MMSrefSat_est.X MMSrefSat_est.Y MMSrefSat_est.Z MMSrefSat_est.VX MMSrefSat_est.VY MMSrefSat_est.VZ MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC1est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC2est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC3est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC4est   MMSrefSat_est.UTCGregorian   MMSrefSat_est.TAIModJulian   MMSrefSat_est.X   MMSrefSat_est.Y   MMSrefSat_est.Z   MMSrefSat_est.VX   MMSrefSat_est.VY   MMSrefSat_est.VZ   MMSrefSat_est.TankMMS.FuelMass     MMSrefSat_est.TankMMS.Pressure     dummyQ dummyQ dummyQ dummyQ navErrType;		
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMSrefSat_est.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMSrefSat_est.TankMMS.FuelMass = MMSrefSat_est.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - refSat_est
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 1dV_est	
BurnDurationTotal = abs(Time_MMS1dV(MMS1dV_Final_Array_Size,1)-Time_MMS1dV(1,1));  
Beta1             = Beta_1dVEst;
Alpha1            = Aplha_1dVEst;
EpochCenter       = EpochCenter_1dVEst;
EpochStart        = (Time_MMS1dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS1dV(MMS1dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(2,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS1dV_est'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_1dVEst      = 1;	
	
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate BackProp Prop_norm(MMS1dV_est(MMS1dV_est.TAIModJulian = Start_Time)) 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
		
Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS1dV_est.RadialTh1.C1 + MMS1dV_est.RadialTh1.C2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.RadialTh1.C3 + MMS1dV_est.RadialTh1.C4*MMS1dV_est.TankMMS.Pressure + ...
   MMS1dV_est.RadialTh1.C5*MMS1dV_est.TankMMS.Pressure^2 + MMS1dV_est.RadialTh1.C6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C7 + MMS1dV_est.RadialTh1.C8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C9 + ...
   MMS1dV_est.RadialTh1.C10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C11 + MMS1dV_est.RadialTh1.C12*MMS1dV_est.RadialTh1.C13^(MMS1dV_est.RadialTh1.C14*MMS1dV_est.TankMMS.Pressure))* ... 
   (MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1 + MMS1dV_est.RadialTh1.C15 + MMS1dV_est.RadialTh1.C16*MMS1dV_est.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(2,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS1dV_est.AxialTh1.C1 + MMS1dV_est.AxialTh1.C2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.AxialTh1.C3 + MMS1dV_est.AxialTh1.C4*MMS1dV_est.TankMMS.Pressure + ...
		MMS1dV_est.AxialTh1.C5*MMS1dV_est.TankMMS.Pressure^2 + MMS1dV_est.AxialTh1.C6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C7 + MMS1dV_est.AxialTh1.C8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C9 + ...
		MMS1dV_est.AxialTh1.C10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C11 + MMS1dV_est.AxialTh1.C12*MMS1dV_est.AxialTh1.C13^(MMS1dV_est.AxialTh1.C14*MMS1dV_est.TankMMS.Pressure))* ... 
		(MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1 + MMS1dV_est.AxialTh1.C15 + MMS1dV_est.AxialTh1.C16*MMS1dV_est.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS1dV_est.TAIModJulian BurnDurationTotal FBstopEpoch_1dVEst FBstartEpoch_1dVEst 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
 
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
	EndIf	
EndFor	

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart	
If EpochStart > Start_Time
	Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

If EpochStart == Start_Time
	Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS1dV_est,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS1dV_est.X;
	SCposVector(2,1) = MMS1dV_est.Y;
	SCposVector(3,1) = MMS1dV_est.Z;
	SCvelVector(1,1) = MMS1dV_est.VX;
	SCvelVector(2,1) = MMS1dV_est.VY;
	SCvelVector(3,1) = MMS1dV_est.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS1dV_est,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS1dV_est.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS1dV_est.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS1dV_est.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS1dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh1.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS1dV_est.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;		
GMAT MMS1dV_est.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS1dV_est.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS1dV_est.AxialTh2.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS1dV_est.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;	
GMAT MMS1dV_est.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_est.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_est.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_est.RadialTh1.DutyCycle = scDutyCycles(2,1)*RadialPercOfMax;
GMAT MMS1dV_est.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS1dV_est.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_est.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_est.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_est.RadialTh2.DutyCycle = scDutyCycles(2,1)*RadialPercOfMax;
GMAT MMS1dV_est.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS1dV_est.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_est.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_est.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_est.RadialTh3.DutyCycle = scDutyCycles(2,1)*RadialPercOfMax;
GMAT MMS1dV_est.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS1dV_est.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS1dV_est.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS1dV_est.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS1dV_est.RadialTh4.DutyCycle = scDutyCycles(2,1)*RadialPercOfMax;
GMAT MMS1dV_est.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS1dV_est.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS1dV_est.TotalMass;

GMAT ThrustRadialSC   = (MMS1dV_est.RadialTh1.C1 + MMS1dV_est.RadialTh1.C2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.RadialTh1.C3 + MMS1dV_est.RadialTh1.C4*MMS1dV_est.TankMMS.Pressure + ...
   MMS1dV_est.RadialTh1.C5*MMS1dV_est.TankMMS.Pressure^2 + MMS1dV_est.RadialTh1.C6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C7 + MMS1dV_est.RadialTh1.C8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C9 + ...
   MMS1dV_est.RadialTh1.C10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.C11 + MMS1dV_est.RadialTh1.C12*MMS1dV_est.RadialTh1.C13^(MMS1dV_est.RadialTh1.C14*MMS1dV_est.TankMMS.Pressure))* ... 
   (MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1 + MMS1dV_est.RadialTh1.C15 + MMS1dV_est.RadialTh1.C16*MMS1dV_est.TankMMS.Pressure))* ...
   MMS1dV_est.RadialTh1.ThrustScaleFactor*MMS1dV_est.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS1dV_est.AxialTh1.C1 + MMS1dV_est.AxialTh1.C2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.AxialTh1.C3 + MMS1dV_est.AxialTh1.C4*MMS1dV_est.TankMMS.Pressure + ...
		MMS1dV_est.AxialTh1.C5*MMS1dV_est.TankMMS.Pressure^2 + MMS1dV_est.AxialTh1.C6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C7 + MMS1dV_est.AxialTh1.C8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C9 + ...
		MMS1dV_est.AxialTh1.C10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.C11 + MMS1dV_est.AxialTh1.C12*MMS1dV_est.AxialTh1.C13^(MMS1dV_est.AxialTh1.C14*MMS1dV_est.TankMMS.Pressure))* ... 
		(MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1 + MMS1dV_est.AxialTh1.C15 + MMS1dV_est.AxialTh1.C16*MMS1dV_est.TankMMS.Pressure))* ...
		MMS1dV_est.AxialTh1.ThrustScaleFactor*MMS1dV_est.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS1dV_est.AxialTh1.K1 + MMS1dV_est.AxialTh1.K2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.AxialTh1.K3+MMS1dV_est.AxialTh1.K4*MMS1dV_est.TankMMS.Pressure+MMS1dV_est.AxialTh1.K5*MMS1dV_est.TankMMS.Pressure^2+ ...
	MMS1dV_est.AxialTh1.K6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.K7 +MMS1dV_est.AxialTh1.K8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.K9+MMS1dV_est.AxialTh1.K10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.AxialTh1.K11+ ...
	MMS1dV_est.AxialTh1.K12*MMS1dV_est.AxialTh1.K13^(MMS1dV_est.AxialTh1.K14*MMS1dV_est.TankMMS.Pressure))*(MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1+MMS1dV_est.AxialTh1.K15+MMS1dV_est.AxialTh1.K16*MMS1dV_est.TankMMS.Pressure);

IspRadial = MMS1dV_est.RadialTh1.K1 + MMS1dV_est.RadialTh1.K2*MMS1dV_est.TankMMS.Pressure + (MMS1dV_est.RadialTh1.K3+MMS1dV_est.RadialTh1.K4*MMS1dV_est.TankMMS.Pressure+MMS1dV_est.RadialTh1.K5*MMS1dV_est.TankMMS.Pressure^2+ ...
	MMS1dV_est.RadialTh1.K6*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.K7 +MMS1dV_est.RadialTh1.K8*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.K9+MMS1dV_est.RadialTh1.K10*MMS1dV_est.TankMMS.Pressure^MMS1dV_est.RadialTh1.K11+ ...
	MMS1dV_est.RadialTh1.K12*MMS1dV_est.RadialTh1.K13^(MMS1dV_est.RadialTh1.K14*MMS1dV_est.TankMMS.Pressure))*(MMS1dV_est.TankMMS.Temperature/MMS1dV_est.TankMMS.RefTemperature)^(1+MMS1dV_est.RadialTh1.K15+MMS1dV_est.RadialTh1.K16*MMS1dV_est.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS1dV_est)
BeginFiniteBurn fburn1AxialTh2(MMS1dV_est)
BeginFiniteBurn fburn1RadialTh1(MMS1dV_est)
BeginFiniteBurn fburn1RadialTh2(MMS1dV_est)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS1dV_est)
	BeginFiniteBurn fburn1RadialTh4(MMS1dV_est)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS1dV_est.TAIModJulian + BurnDuration/86400;

For j = 1:1:MMS1dV_Final_Array_Size
	Dummy_Array(j,1) = Time_MMS1dV(j,1)/(86400) + Start_Time;
EndFor

For j = 2:1:MMS1dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(j,1)
	Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS1dV_est)
EndFiniteBurn fburn1AxialTh2(MMS1dV_est)
EndFiniteBurn fburn1RadialTh1(MMS1dV_est)
EndFiniteBurn fburn1RadialTh2(MMS1dV_est)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS1dV_est)
	EndFiniteBurn fburn1RadialTh4(MMS1dV_est)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Report TestFile2 FBurnEnd_Index Burn2Epoch MMS1dV_est.TAIModJulian
		Propagate Prop_norm(MMS1dV_est) {MMS1dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS1dV_est.TAIModJulian MMS1dV_est.X MMS1dV_est.Y MMS1dV_est.Z MMS1dV_est.VX MMS1dV_est.VY MMS1dV_est.VZ MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC2est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC3est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC4est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC1est   MMS1dV_est.UTCGregorian      MMS1dV_est.TAIModJulian      MMS1dV_est.X      MMS1dV_est.Y      MMS1dV_est.Z      MMS1dV_est.VX      MMS1dV_est.VY      MMS1dV_est.VZ      MMS1dV_est.TankMMS.FuelMass        MMS1dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS1dV_est.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS1dV_est.TankMMS.FuelMass = MMS1dV_est.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 1dV_est
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 2dV_est	
BurnDurationTotal = abs(Time_MMS2dV(MMS2dV_Final_Array_Size,1)-Time_MMS2dV(1,1));  
Beta1             = Beta_2dVEst;
Alpha1            = Aplha_2dVEst;
EpochCenter       = EpochCenter_2dVEst;
EpochStart        = (Time_MMS2dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS2dV(MMS2dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(3,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS2dV_est'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_2dVEst      = 1;
		
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Start_Time} 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
		
Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS2dV_est.RadialTh1.C1 + MMS2dV_est.RadialTh1.C2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.RadialTh1.C3 + MMS2dV_est.RadialTh1.C4*MMS2dV_est.TankMMS.Pressure + ...
   MMS2dV_est.RadialTh1.C5*MMS2dV_est.TankMMS.Pressure^2 + MMS2dV_est.RadialTh1.C6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C7 + MMS2dV_est.RadialTh1.C8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C9 + ...
   MMS2dV_est.RadialTh1.C10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C11 + MMS2dV_est.RadialTh1.C12*MMS2dV_est.RadialTh1.C13^(MMS2dV_est.RadialTh1.C14*MMS2dV_est.TankMMS.Pressure))* ... 
   (MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1 + MMS2dV_est.RadialTh1.C15 + MMS2dV_est.RadialTh1.C16*MMS2dV_est.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(3,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS2dV_est.AxialTh1.C1 + MMS2dV_est.AxialTh1.C2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.AxialTh1.C3 + MMS2dV_est.AxialTh1.C4*MMS2dV_est.TankMMS.Pressure + ...
		MMS2dV_est.AxialTh1.C5*MMS2dV_est.TankMMS.Pressure^2 + MMS2dV_est.AxialTh1.C6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C7 + MMS2dV_est.AxialTh1.C8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C9 + ...
		MMS2dV_est.AxialTh1.C10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C11 + MMS2dV_est.AxialTh1.C12*MMS2dV_est.AxialTh1.C13^(MMS2dV_est.AxialTh1.C14*MMS2dV_est.TankMMS.Pressure))* ... 
		(MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1 + MMS2dV_est.AxialTh1.C15 + MMS2dV_est.AxialTh1.C16*MMS2dV_est.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS2dV_est.TAIModJulian BurnDurationTotal FBstopEpoch_2dVEst FBstartEpoch_2dVEst 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
 
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	Report TestFile2 Final_Array(i,1) EpochStartSec
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index
	EndIf	
EndFor	

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart	
If EpochStart > Start_Time
	Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS2dV_est,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS2dV_est.X;
	SCposVector(2,1) = MMS2dV_est.Y;
	SCposVector(3,1) = MMS2dV_est.Z;
	SCvelVector(1,1) = MMS2dV_est.VX;
	SCvelVector(2,1) = MMS2dV_est.VY;
	SCvelVector(3,1) = MMS2dV_est.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS2dV_est,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS2dV_est.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS2dV_est.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS2dV_est.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS2dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh1.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS2dV_est.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;		
GMAT MMS2dV_est.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS2dV_est.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS2dV_est.AxialTh2.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS2dV_est.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;	
GMAT MMS2dV_est.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_est.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_est.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_est.RadialTh1.DutyCycle = scDutyCycles(3,1)*RadialPercOfMax;
GMAT MMS2dV_est.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS2dV_est.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_est.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_est.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_est.RadialTh2.DutyCycle = scDutyCycles(3,1)*RadialPercOfMax;
GMAT MMS2dV_est.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS2dV_est.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_est.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_est.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_est.RadialTh3.DutyCycle = scDutyCycles(3,1)*RadialPercOfMax;
GMAT MMS2dV_est.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS2dV_est.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS2dV_est.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS2dV_est.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS2dV_est.RadialTh4.DutyCycle = scDutyCycles(3,1)*RadialPercOfMax;
GMAT MMS2dV_est.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS2dV_est.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS2dV_est.TotalMass;

GMAT ThrustRadialSC   = (MMS2dV_est.RadialTh1.C1 + MMS2dV_est.RadialTh1.C2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.RadialTh1.C3 + MMS2dV_est.RadialTh1.C4*MMS2dV_est.TankMMS.Pressure + ...
   MMS2dV_est.RadialTh1.C5*MMS2dV_est.TankMMS.Pressure^2 + MMS2dV_est.RadialTh1.C6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C7 + MMS2dV_est.RadialTh1.C8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C9 + ...
   MMS2dV_est.RadialTh1.C10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.C11 + MMS2dV_est.RadialTh1.C12*MMS2dV_est.RadialTh1.C13^(MMS2dV_est.RadialTh1.C14*MMS2dV_est.TankMMS.Pressure))* ... 
   (MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1 + MMS2dV_est.RadialTh1.C15 + MMS2dV_est.RadialTh1.C16*MMS2dV_est.TankMMS.Pressure))* ...
   MMS2dV_est.RadialTh1.ThrustScaleFactor*MMS2dV_est.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS2dV_est.AxialTh1.C1 + MMS2dV_est.AxialTh1.C2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.AxialTh1.C3 + MMS2dV_est.AxialTh1.C4*MMS2dV_est.TankMMS.Pressure + ...
		MMS2dV_est.AxialTh1.C5*MMS2dV_est.TankMMS.Pressure^2 + MMS2dV_est.AxialTh1.C6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C7 + MMS2dV_est.AxialTh1.C8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C9 + ...
		MMS2dV_est.AxialTh1.C10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.C11 + MMS2dV_est.AxialTh1.C12*MMS2dV_est.AxialTh1.C13^(MMS2dV_est.AxialTh1.C14*MMS2dV_est.TankMMS.Pressure))* ... 
		(MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1 + MMS2dV_est.AxialTh1.C15 + MMS2dV_est.AxialTh1.C16*MMS2dV_est.TankMMS.Pressure))* ...
		MMS2dV_est.AxialTh1.ThrustScaleFactor*MMS2dV_est.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS2dV_est.AxialTh1.K1 + MMS2dV_est.AxialTh1.K2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.AxialTh1.K3+MMS2dV_est.AxialTh1.K4*MMS2dV_est.TankMMS.Pressure+MMS2dV_est.AxialTh1.K5*MMS2dV_est.TankMMS.Pressure^2+ ...
	MMS2dV_est.AxialTh1.K6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.K7 +MMS2dV_est.AxialTh1.K8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.K9+MMS2dV_est.AxialTh1.K10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.AxialTh1.K11+ ...
	MMS2dV_est.AxialTh1.K12*MMS2dV_est.AxialTh1.K13^(MMS2dV_est.AxialTh1.K14*MMS2dV_est.TankMMS.Pressure))*(MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1+MMS2dV_est.AxialTh1.K15+MMS2dV_est.AxialTh1.K16*MMS2dV_est.TankMMS.Pressure);

IspRadial = MMS2dV_est.RadialTh1.K1 + MMS2dV_est.RadialTh1.K2*MMS2dV_est.TankMMS.Pressure + (MMS2dV_est.RadialTh1.K3+MMS2dV_est.RadialTh1.K4*MMS2dV_est.TankMMS.Pressure+MMS2dV_est.RadialTh1.K5*MMS2dV_est.TankMMS.Pressure^2+ ...
	MMS2dV_est.RadialTh1.K6*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.K7 +MMS2dV_est.RadialTh1.K8*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.K9+MMS2dV_est.RadialTh1.K10*MMS2dV_est.TankMMS.Pressure^MMS2dV_est.RadialTh1.K11+ ...
	MMS2dV_est.RadialTh1.K12*MMS2dV_est.RadialTh1.K13^(MMS2dV_est.RadialTh1.K14*MMS2dV_est.TankMMS.Pressure))*(MMS2dV_est.TankMMS.Temperature/MMS2dV_est.TankMMS.RefTemperature)^(1+MMS2dV_est.RadialTh1.K15+MMS2dV_est.RadialTh1.K16*MMS2dV_est.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS2dV_est)
BeginFiniteBurn fburn1AxialTh2(MMS2dV_est)
BeginFiniteBurn fburn1RadialTh1(MMS2dV_est)
BeginFiniteBurn fburn1RadialTh2(MMS2dV_est)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS2dV_est)
	BeginFiniteBurn fburn1RadialTh4(MMS2dV_est)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS2dV_est.TAIModJulian + BurnDuration/86400;

For k = 1:1:MMS2dV_Final_Array_Size
	Dummy_Array(k,1) = Time_MMS2dV(k,1)/(86400) + Start_Time;
EndFor

For k = 2:1:MMS2dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(k,1);
	Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS2dV_est)
EndFiniteBurn fburn1AxialTh2(MMS2dV_est)
EndFiniteBurn fburn1RadialTh1(MMS2dV_est)
EndFiniteBurn fburn1RadialTh2(MMS2dV_est)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS2dV_est)
	EndFiniteBurn fburn1RadialTh4(MMS2dV_est)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMS2dV_est) {MMS2dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS2dV_est.TAIModJulian MMS2dV_est.X MMS2dV_est.Y MMS2dV_est.Z MMS2dV_est.VX MMS2dV_est.VY MMS2dV_est.VZ MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC3est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC4est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC1est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC2est   MMS2dV_est.UTCGregorian      MMS2dV_est.TAIModJulian      MMS2dV_est.X      MMS2dV_est.Y      MMS2dV_est.Z      MMS2dV_est.VX      MMS2dV_est.VY      MMS2dV_est.VZ      MMS2dV_est.TankMMS.FuelMass        MMS2dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS2dV_est.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS2dV_est.TankMMS.FuelMass = MMS2dV_est.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 2dV_est
% Report SC Hardware parameter values
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;
% ~~ BEGIN FINITE BURN FOR SC - 3dV_est	
BurnDurationTotal = abs(Time_MMS3dV(MMS3dV_Final_Array_Size,1)-Time_MMS3dV(1,1));  
Beta1             = Beta_3dVEst;
Alpha1            = Aplha_3dVEst;
EpochCenter       = EpochCenter_3dVEst;
EpochStart        = (Time_MMS3dV(1,1)/86400)+Start_Time;
EpochEnd          = Time_MMS3dV(MMS3dV_Final_Array_Size,1)/86400+Start_Time;
numThrustersUsed  = numRadThrusters(4,1);

Report TestFile2 EpochStart EpochEnd BurnDurationTotal
Test = 'MMS3dV_est'
Report TestFile Test

If EpochStart == EpochEnd
	PerformIBurn_3dVEst      = 1;
		
	%Determine at which point the IBurnStart occurs in the indexing
	For i = 1:1:Index
		If Final_Array(i,1) == IBurnStart
			IBurn_Index = i
		EndIf	
	EndFor
	
	%Using pre-IBurn state
	%Propagate  BackProp Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Start_Time} 
	For i = 1:1:IBurn_Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
	%Using post-IBurn state
	IBurn_Index = IBurn_Index + 1;
	For i = IBurn_Index:Index
		Burn2Epoch = Final_Array(i,1)/(86400) + Start_Time;
		Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor	
	
Else
% Calculate new VNB burn direction
VNBTargetDir(1,1) = cos(Beta1*deg2rad) * cos(Alpha1*deg2rad);
VNBTargetDir(2,1) = cos(Beta1*deg2rad) * sin(Alpha1*deg2rad);
VNBTargetDir(3,1) = sin(Beta1*deg2rad);

% Calculate Thrust
GMAT ThrustRadialSC   = (MMS3dV_est.RadialTh1.C1 + MMS3dV_est.RadialTh1.C2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.RadialTh1.C3 + MMS3dV_est.RadialTh1.C4*MMS3dV_est.TankMMS.Pressure + ...
   MMS3dV_est.RadialTh1.C5*MMS3dV_est.TankMMS.Pressure^2 + MMS3dV_est.RadialTh1.C6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C7 + MMS3dV_est.RadialTh1.C8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C9 + ...
   MMS3dV_est.RadialTh1.C10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C11 + MMS3dV_est.RadialTh1.C12*MMS3dV_est.RadialTh1.C13^(MMS3dV_est.RadialTh1.C14*MMS3dV_est.TankMMS.Pressure))* ... 
   (MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1 + MMS3dV_est.RadialTh1.C15 + MMS3dV_est.RadialTh1.C16*MMS3dV_est.TankMMS.Pressure))* ...
   origAxialRadialSC.RadialTh1.ThrustScaleFactor*scDutyCycles(4,1); 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS3dV_est.AxialTh1.C1 + MMS3dV_est.AxialTh1.C2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.AxialTh1.C3 + MMS3dV_est.AxialTh1.C4*MMS3dV_est.TankMMS.Pressure + ...
		MMS3dV_est.AxialTh1.C5*MMS3dV_est.TankMMS.Pressure^2 + MMS3dV_est.AxialTh1.C6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C7 + MMS3dV_est.AxialTh1.C8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C9 + ...
		MMS3dV_est.AxialTh1.C10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C11 + MMS3dV_est.AxialTh1.C12*MMS3dV_est.AxialTh1.C13^(MMS3dV_est.AxialTh1.C14*MMS3dV_est.TankMMS.Pressure))* ... 
		(MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1 + MMS3dV_est.AxialTh1.C15 + MMS3dV_est.AxialTh1.C16*MMS3dV_est.TankMMS.Pressure))* ...
		origAxialRadialSC.AxialTh1.ThrustScaleFactor*origAxialRadialSC.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

% Propagate SC to BurnStart
%Report FBurnDebugRpt EpochStart EpochCenter EpochCenter MMS3dV_est.TAIModJulian BurnDurationTotal FBstopEpoch_3dVEst FBstartEpoch_3dVEst 
%Report FBurnDebugRpt Beta1 Alpha1 VNBTargetDir ThrustAxialSC ThrustRadialSC FlagAxialOn
%Determine at which point EpochStart occurs in the indexing
 
EpochStartSec = abs(Start_Time-EpochStart)*86400 ;

Lower = EpochStartSec-.000001
Upper = EpochStartSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurn_Index = i
		Report TestFile2 FBurn_Index
	EndIf	
EndFor	

%If EpochStart occurs after Start_Time, spacecraft will back propagate to Start_Time then forward propagate to each interval to EpochStart	
If EpochStart > Start_Time
	Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Start_Time}
	For i = 2:1:FBurn_Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	EndFor
EndIf	

If EpochStart == Start_Time
	Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Start_Time}
EndIf

% Perform Burn step propagations
GMAT BurnCurrent          = 0;
GMAT Prop_Done            = 0;
GMAT estDeltaMassTotal    = 0;
GMAT actualDeltaMassTotal = 0;
		
% \/ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.
% Convert IB direction from VNB to MJ2kEq
GMAT fromCSflag = 1; % VNB
GMAT toCSflag   = 0; % MJ2k
% Begin ConvertSatCS. Former GMAT Function
%GMAT [MJ2kTargetDir] = ConvertSatCS(fromCSflag,toCSflag,MMS3dV_est,VNBTargetDir);
	% Define position and velocity vectors of the Spacecraft
	SCposVector(1,1) = MMS3dV_est.X;
	SCposVector(2,1) = MMS3dV_est.Y;
	SCposVector(3,1) = MMS3dV_est.Z;
	SCvelVector(1,1) = MMS3dV_est.VX;
	SCvelVector(2,1) = MMS3dV_est.VY;
	SCvelVector(3,1) = MMS3dV_est.VZ;

	% Calculate Rotation Matrix for MJ2k to VNB CS transformation
	%[intermVec2]        = cross3by1(SCposVector,SCvelVector);
		intermVec2(1,1) = SCposVector(2,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(2,1);
		intermVec2(2,1) = -(SCposVector(1,1)*SCvelVector(3,1) - SCposVector(3,1)*SCvelVector(1,1));
		intermVec2(3,1) = SCposVector(1,1)*SCvelVector(2,1) - SCposVector(2,1)*SCvelVector(1,1);				
	%[intermVec2]        = unitize3by1(intermVec2);
		magVector = sqrt(intermVec2(1,1)*intermVec2(1,1) + intermVec2(2,1)*intermVec2(2,1) + intermVec2(3,1)*intermVec2(3,1));
		intermVec2(1,1) = intermVec2(1,1)/magVector;
		intermVec2(2,1) = intermVec2(2,1)/magVector;
		intermVec2(3,1) = intermVec2(3,1)/magVector;			
	%[intermVec1]        = unitize3by1(SCvelVector);
		magVector = sqrt(SCvelVector(1,1)*SCvelVector(1,1) + SCvelVector(2,1)*SCvelVector(2,1) + SCvelVector(3,1)*SCvelVector(3,1));
		intermVec1(1,1) = SCvelVector(1,1)/magVector;
		intermVec1(2,1) = SCvelVector(2,1)/magVector;
		intermVec1(3,1) = SCvelVector(3,1)/magVector;					
	%[intermVec3]        = cross3by1(intermVec1,intermVec2);
		intermVec3(1,1) = intermVec1(2,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(2,1);
		intermVec3(2,1) = -(intermVec1(1,1)*intermVec2(3,1) - intermVec1(3,1)*intermVec2(1,1));
		intermVec3(3,1) = intermVec1(1,1)*intermVec2(2,1) - intermVec1(2,1)*intermVec2(1,1);
	M2ktoVNBrotMat(1,1) = intermVec1(1,1);
	M2ktoVNBrotMat(1,2) = intermVec1(2,1);
	M2ktoVNBrotMat(1,3) = intermVec1(3,1);
	M2ktoVNBrotMat(2,1) = intermVec2(1,1);
	M2ktoVNBrotMat(2,2) = intermVec2(2,1);
	M2ktoVNBrotMat(2,3) = intermVec2(3,1);
	M2ktoVNBrotMat(3,1) = intermVec3(1,1);
	M2ktoVNBrotMat(3,2) = intermVec3(2,1);
	M2ktoVNBrotMat(3,3) = intermVec3(3,1);

	% REMINDER: y=Ax and x =(A^-1)y

	If fromCSflag == 0 & toCSflag == 1
	% Convert MJ2000Eq to VNB
		MJ2kTargetDir = M2ktoVNBrotMat*VNBTargetDir;
	EndIf

	If fromCSflag == 1 & toCSflag == 0
	% Convert VNB to MJ2000Eq
		MJ2kTargetDir = transpose(M2ktoVNBrotMat)*VNBTargetDir;
	EndIf

	If fromCSflag == toCSflag
	% No Conversion occurs since from and to CS are the same
		MJ2kTargetDir = VNBTargetDir;
	EndIf

	%Report FBurnDebugRpt MJ2kTargetDir VNBTargetDir M2ktoVNBrotMat fromCSflag toCSflag		
% End ConvertSatCS. Former GMAT Function

% Begin unitize3by1. Former GMAT Function
%GMAT [MJ2kTargetDir] = unitize3by1(MJ2kTargetDir);
	magVector = sqrt(MJ2kTargetDir(1,1)*MJ2kTargetDir(1,1) + MJ2kTargetDir(2,1)*MJ2kTargetDir(2,1) + MJ2kTargetDir(3,1)*MJ2kTargetDir(3,1));
	MJ2kTargetDir(1,1) = MJ2kTargetDir(1,1)/magVector;
	MJ2kTargetDir(2,1) = MJ2kTargetDir(2,1)/magVector;
	MJ2kTargetDir(3,1) = MJ2kTargetDir(3,1)/magVector;
% Begin unitize3by1. Former GMAT Function

%Report FBurnDebugRpt MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TotalMass;

% Calculate SC Body Axes
% Begin CalcSCbodyAxes. Former GMAT function
%GMAT [scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis] = CalcSCbodyAxes(MMS3dV_est,zGSEVector,MJ2kTargetDir, RAdeg, DECdeg);
	%[scSpinAxisGSE] = RotateSpinAxis(zGSEVector,RAdeg,DECdeg)
		rotMatRA(1,1) = cos(-RAdeg*deg2rad);
		rotMatRA(1,2) = sin(-RAdeg*deg2rad);
		rotMatRA(1,3) = 0;
		rotMatRA(2,1) = -sin(-RAdeg*deg2rad);
		rotMatRA(2,2) = cos(-RAdeg*deg2rad);
		rotMatRA(2,3) = 0;
		rotMatRA(3,1) = 0;
		rotMatRA(3,2) = 0;
		rotMatRA(3,3) = 1;

		rotMatDEC(1,1) = cos(-DECdeg*deg2rad);
		rotMatDEC(1,2) = 0;
		rotMatDEC(1,3) = -sin(-DECdeg*deg2rad);
		rotMatDEC(2,1) = 0;
		rotMatDEC(2,2) = 1;
		rotMatDEC(2,3) = 0;
		rotMatDEC(3,1) = sin(-DECdeg*deg2rad);
		rotMatDEC(3,2) = 0;
		rotMatDEC(3,3) = cos(-DECdeg*deg2rad);

		scSpinAxisGSE = rotMatRA*rotMatDEC*zGSEVector;	
		%Report FBurnDebugRpt scSpinAxisGSE
	
	%[scSpinAxisMJ2k] = GSEtoMJ2kEq4MMS(scSpinAxisGSE,GSEepoch,GSEconvertFlag)
		currSCepoch = MMS3dV_est.TAIModJulian - 60/86400;
		GSEconvertSC.Epoch = currSCepoch;
		GSEconvertSC.X = 7100;
		GSEconvertSC.Y = 0;
		GSEconvertSC.Z = 1300;		
		
		%Report FBurnDebugRpt MMS3dV_est.TAIModJulian GSEconvertSC.TAIModJulian
		Propagate simpleProp(GSEconvertSC);
		%Report FBurnDebugRpt MMS3dV_est.TAIModJulian GSEconvertSC.TAIModJulian			
		
		GSEconvertSC.X = scSpinAxisGSE(1,1);
		GSEconvertSC.Y = scSpinAxisGSE(2,1);
		GSEconvertSC.Z = scSpinAxisGSE(3,1);	
		
		scSpinAxisMJ2k(1,1) = GSEconvertSC.EarthMJ2000Eq.X;
		scSpinAxisMJ2k(2,1) = GSEconvertSC.EarthMJ2000Eq.Y;
		scSpinAxisMJ2k(3,1) = GSEconvertSC.EarthMJ2000Eq.Z;

	scBodyAttZaxis = scSpinAxisMJ2k;
	%[scBodyAttXaxis] = cross3by1(MJ2kTargetDir,scBodyAttZaxis)
		scBodyAttXaxis(1,1) = MJ2kTargetDir(2,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(2,1);
		scBodyAttXaxis(2,1) = -(MJ2kTargetDir(1,1)*scBodyAttZaxis(3,1) - MJ2kTargetDir(3,1)*scBodyAttZaxis(1,1));
		scBodyAttXaxis(3,1) = MJ2kTargetDir(1,1)*scBodyAttZaxis(2,1) - MJ2kTargetDir(2,1)*scBodyAttZaxis(1,1);	
	%[scBodyAttXaxis] = unitize3by1(scBodyAttXaxis)
		magVector = sqrt(scBodyAttXaxis(1,1)*scBodyAttXaxis(1,1) + scBodyAttXaxis(2,1)*scBodyAttXaxis(2,1) + scBodyAttXaxis(3,1)*scBodyAttXaxis(3,1));
		scBodyAttXaxis(1,1) = scBodyAttXaxis(1,1)/magVector;
		scBodyAttXaxis(2,1) = scBodyAttXaxis(2,1)/magVector;
		scBodyAttXaxis(3,1) = scBodyAttXaxis(3,1)/magVector;	
	%[scBodyAttYaxis] = cross3by1(scBodyAttZaxis,scBodyAttXaxis)
		scBodyAttYaxis(1,1) = scBodyAttZaxis(2,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(2,1);
		scBodyAttYaxis(2,1) = -(scBodyAttZaxis(1,1)*scBodyAttXaxis(3,1) - scBodyAttZaxis(3,1)*scBodyAttXaxis(1,1));
		scBodyAttYaxis(3,1) = scBodyAttZaxis(1,1)*scBodyAttXaxis(2,1) - scBodyAttZaxis(2,1)*scBodyAttXaxis(1,1);	
	%[scBodyAttYaxis] = unitize3by1(scBodyAttYaxis)
		magVector = sqrt(scBodyAttYaxis(1,1)*scBodyAttYaxis(1,1) + scBodyAttYaxis(2,1)*scBodyAttYaxis(2,1) + scBodyAttYaxis(3,1)*scBodyAttYaxis(3,1));
		scBodyAttYaxis(1,1) = scBodyAttYaxis(1,1)/magVector;
		scBodyAttYaxis(2,1) = scBodyAttYaxis(2,1)/magVector;
		scBodyAttYaxis(3,1) = scBodyAttYaxis(3,1)/magVector;	
% End CalcSCbodyAxes. Former GMAT function

%Report FBurnDebugRpt MJ2kTargetDir scBodyAttXaxis scBodyAttYaxis scBodyAttZaxis ThrustAxialSC ThrustRadialSC;

% Calculate modified thruster settings
% Begin SetManeuverParameters. Former GMAT function
%GMAT [AxialPercOfMax,AxialDirection,RadialPercOfMax] = SetManeuverParameters(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir,ThrustAxialSC,ThrustRadialSC)
	TotalAxialThrust  = ThrustAxialSC*2;
	TotalRadialThrust = ThrustRadialSC*numThrustersUsed;

	GMAT MaxThrustUnitVector(1,1) = 0; % x-axis
	GMAT MaxThrustUnitVector(2,1) = TotalRadialThrust; % y-axis
	GMAT MaxThrustUnitVector(3,1) = TotalAxialThrust;  % z-axis
	%GMAT [MaxThrustUnitVector] = unitize3by1(MaxThrustUnitVector);
		magVector = sqrt(MaxThrustUnitVector(1,1)*MaxThrustUnitVector(1,1) + MaxThrustUnitVector(2,1)*MaxThrustUnitVector(2,1) + MaxThrustUnitVector(3,1)*MaxThrustUnitVector(3,1));
		MaxThrustUnitVector(1,1) = MaxThrustUnitVector(1,1)/magVector;
		MaxThrustUnitVector(2,1) = MaxThrustUnitVector(2,1)/magVector;
		MaxThrustUnitVector(3,1) = MaxThrustUnitVector(3,1)/magVector;	

	%GMAT [TargetDeltaVDirectionBody] = RotateAxes3by1(scBodyAttXaxis,scBodyAttYaxis,scBodyAttZaxis,MJ2kTargetDir);
		ConvertMatrix(1,1) = scBodyAttXaxis(1,1);
		ConvertMatrix(1,2) = scBodyAttXaxis(2,1);
		ConvertMatrix(1,3) = scBodyAttXaxis(3,1);
		ConvertMatrix(2,1) = scBodyAttYaxis(1,1);
		ConvertMatrix(2,2) = scBodyAttYaxis(2,1);
		ConvertMatrix(2,3) = scBodyAttYaxis(3,1);
		ConvertMatrix(3,1) = scBodyAttZaxis(1,1);
		ConvertMatrix(3,2) = scBodyAttZaxis(2,1);
		ConvertMatrix(3,3) = scBodyAttZaxis(3,1);

		TargetDeltaVDirectionBody = ConvertMatrix*MJ2kTargetDir;
	
	RadialComp = TargetDeltaVDirectionBody(2,1);
	AxialComp  = TargetDeltaVDirectionBody(3,1);

	If AxialComp < 0
		AxialDirection = -1;

		AxialComp = -AxialComp;
	Else;
		AxialDirection = 1;
	EndIf;

	If TotalAxialThrust == 0
		AxialPercOfMax  = 0.00;
		RadialPercOfMax = 1.00;
	Else;
		If RadialComp>MaxThrustUnitVector(2,1)
			RadialPercOfMax = 1.00;
			AxialPercOfMax  = (AxialComp/RadialComp)*TotalRadialThrust/TotalAxialThrust;
		Else;
			AxialPercOfMax  = 1.00;
			RadialPercOfMax = (RadialComp/AxialComp)*TotalAxialThrust/TotalRadialThrust;		
		EndIf;
	EndIf;
% End SetManeuverParameters. Former GMAT function

%Report FBurnDebugRpt AxialPercOfMax AxialDirection RadialPercOfMax;

% Change Thruster Direction and Duty Cycle
GMAT MMS3dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh1.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh1.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh1.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh1.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS3dV_est.AxialTh1.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;		
GMAT MMS3dV_est.AxialTh2.ThrustDirection1 = scBodyAttZaxis(1,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh2.ThrustDirection2 = scBodyAttZaxis(2,1)*AxialDirection;
GMAT MMS3dV_est.AxialTh2.ThrustDirection3 = scBodyAttZaxis(3,1)*AxialDirection;		
GMAT MMS3dV_est.AxialTh2.DutyCycle = origAxialRadialSC.AxialTh1.DutyCycle*AxialPercOfMax;
GMAT MMS3dV_est.AxialTh2.ThrustScaleFactor = origAxialRadialSC.AxialTh1.ThrustScaleFactor;	
GMAT MMS3dV_est.RadialTh1.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_est.RadialTh1.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_est.RadialTh1.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_est.RadialTh1.DutyCycle = scDutyCycles(4,1)*RadialPercOfMax;
GMAT MMS3dV_est.RadialTh1.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS3dV_est.RadialTh2.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_est.RadialTh2.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_est.RadialTh2.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_est.RadialTh2.DutyCycle = scDutyCycles(4,1)*RadialPercOfMax;
GMAT MMS3dV_est.RadialTh2.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS3dV_est.RadialTh3.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_est.RadialTh3.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_est.RadialTh3.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_est.RadialTh3.DutyCycle = scDutyCycles(4,1)*RadialPercOfMax;
GMAT MMS3dV_est.RadialTh3.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;
GMAT MMS3dV_est.RadialTh4.ThrustDirection1 = scBodyAttYaxis(1,1);
GMAT MMS3dV_est.RadialTh4.ThrustDirection2 = scBodyAttYaxis(2,1);
GMAT MMS3dV_est.RadialTh4.ThrustDirection3 = scBodyAttYaxis(3,1);
GMAT MMS3dV_est.RadialTh4.DutyCycle = scDutyCycles(4,1)*RadialPercOfMax;
GMAT MMS3dV_est.RadialTh4.ThrustScaleFactor = origAxialRadialSC.RadialTh1.ThrustScaleFactor;	
% /\ TEMP LOCATION UNTIL GMAT FUNCTIONS IN WHILE BUG Fixed.	

% Determine the remaining time until the burn is finished
GMAT PropTimeLeft = BurnDurationTotal-abs(MMS3dV_est.TAIModJulian - EpochStart)*86400;

% Determine the finite burn duration
GMAT BurnDuration = BurnDurationTotal;

% Fuel Mass calculations - Pre Burn
preManeuverMass = MMS3dV_est.TotalMass;

GMAT ThrustRadialSC   = (MMS3dV_est.RadialTh1.C1 + MMS3dV_est.RadialTh1.C2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.RadialTh1.C3 + MMS3dV_est.RadialTh1.C4*MMS3dV_est.TankMMS.Pressure + ...
   MMS3dV_est.RadialTh1.C5*MMS3dV_est.TankMMS.Pressure^2 + MMS3dV_est.RadialTh1.C6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C7 + MMS3dV_est.RadialTh1.C8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C9 + ...
   MMS3dV_est.RadialTh1.C10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.C11 + MMS3dV_est.RadialTh1.C12*MMS3dV_est.RadialTh1.C13^(MMS3dV_est.RadialTh1.C14*MMS3dV_est.TankMMS.Pressure))* ... 
   (MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1 + MMS3dV_est.RadialTh1.C15 + MMS3dV_est.RadialTh1.C16*MMS3dV_est.TankMMS.Pressure))* ...
   MMS3dV_est.RadialTh1.ThrustScaleFactor*MMS3dV_est.RadialTh1.DutyCycle; 

If FlagAxialOn == 1
	GMAT ThrustAxialSC = (MMS3dV_est.AxialTh1.C1 + MMS3dV_est.AxialTh1.C2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.AxialTh1.C3 + MMS3dV_est.AxialTh1.C4*MMS3dV_est.TankMMS.Pressure + ...
		MMS3dV_est.AxialTh1.C5*MMS3dV_est.TankMMS.Pressure^2 + MMS3dV_est.AxialTh1.C6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C7 + MMS3dV_est.AxialTh1.C8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C9 + ...
		MMS3dV_est.AxialTh1.C10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.C11 + MMS3dV_est.AxialTh1.C12*MMS3dV_est.AxialTh1.C13^(MMS3dV_est.AxialTh1.C14*MMS3dV_est.TankMMS.Pressure))* ... 
		(MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1 + MMS3dV_est.AxialTh1.C15 + MMS3dV_est.AxialTh1.C16*MMS3dV_est.TankMMS.Pressure))* ...
		MMS3dV_est.AxialTh1.ThrustScaleFactor*MMS3dV_est.AxialTh1.DutyCycle;
Else;
	GMAT ThrustAxialSC  = 0;
EndIf;  

IspAxial = MMS3dV_est.AxialTh1.K1 + MMS3dV_est.AxialTh1.K2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.AxialTh1.K3+MMS3dV_est.AxialTh1.K4*MMS3dV_est.TankMMS.Pressure+MMS3dV_est.AxialTh1.K5*MMS3dV_est.TankMMS.Pressure^2+ ...
	MMS3dV_est.AxialTh1.K6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.K7 +MMS3dV_est.AxialTh1.K8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.K9+MMS3dV_est.AxialTh1.K10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.AxialTh1.K11+ ...
	MMS3dV_est.AxialTh1.K12*MMS3dV_est.AxialTh1.K13^(MMS3dV_est.AxialTh1.K14*MMS3dV_est.TankMMS.Pressure))*(MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1+MMS3dV_est.AxialTh1.K15+MMS3dV_est.AxialTh1.K16*MMS3dV_est.TankMMS.Pressure);

IspRadial = MMS3dV_est.RadialTh1.K1 + MMS3dV_est.RadialTh1.K2*MMS3dV_est.TankMMS.Pressure + (MMS3dV_est.RadialTh1.K3+MMS3dV_est.RadialTh1.K4*MMS3dV_est.TankMMS.Pressure+MMS3dV_est.RadialTh1.K5*MMS3dV_est.TankMMS.Pressure^2+ ...
	MMS3dV_est.RadialTh1.K6*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.K7 +MMS3dV_est.RadialTh1.K8*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.K9+MMS3dV_est.RadialTh1.K10*MMS3dV_est.TankMMS.Pressure^MMS3dV_est.RadialTh1.K11+ ...
	MMS3dV_est.RadialTh1.K12*MMS3dV_est.RadialTh1.K13^(MMS3dV_est.RadialTh1.K14*MMS3dV_est.TankMMS.Pressure))*(MMS3dV_est.TankMMS.Temperature/MMS3dV_est.TankMMS.RefTemperature)^(1+MMS3dV_est.RadialTh1.K15+MMS3dV_est.RadialTh1.K16*MMS3dV_est.TankMMS.Pressure);

estDeltaMassRadial = BurnDuration*(ThrustRadialSC*numThrustersUsed)/ (IspRadial * GravConst);
estDeltaMassAxial  = BurnDuration*(ThrustAxialSC*2)/ (IspAxial * GravConst);
estDeltaMass       = estDeltaMassAxial + estDeltaMassRadial;

% Turn On THRUSTERS
BeginFiniteBurn fburn1AxialTh1(MMS3dV_est)
BeginFiniteBurn fburn1AxialTh2(MMS3dV_est)
BeginFiniteBurn fburn1RadialTh1(MMS3dV_est)
BeginFiniteBurn fburn1RadialTh2(MMS3dV_est)
If numThrustersUsed == 2
Else
	BeginFiniteBurn fburn1RadialTh3(MMS3dV_est)
	BeginFiniteBurn fburn1RadialTh4(MMS3dV_est)
EndIf

% Propagate while thrusters on
%GMAT Burn2Epoch   = MMS3dV_est.TAIModJulian + BurnDuration/86400;

For l = 1:1:MMS3dV_Final_Array_Size
	Dummy_Array(l,1) = Time_MMS3dV(l,1)/(86400) + Start_Time;
EndFor

For l = 2:1:MMS3dV_Final_Array_Size
	Burn2Epoch = Dummy_Array(l,1);
	Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Burn2Epoch}
	Report TestFile Burn2Epoch MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure

		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
EndFor

% Turn Off THRUSTERS
EndFiniteBurn fburn1AxialTh1(MMS3dV_est)
EndFiniteBurn fburn1AxialTh2(MMS3dV_est)
EndFiniteBurn fburn1RadialTh1(MMS3dV_est)
EndFiniteBurn fburn1RadialTh2(MMS3dV_est)
If numThrustersUsed == 2
Else
	EndFiniteBurn fburn1RadialTh3(MMS3dV_est)
	EndFiniteBurn fburn1RadialTh4(MMS3dV_est)
EndIf

%Determine at which point EpochEnd occurs in the indexing
 
EpochEndSec = abs(Start_Time-EpochEnd)*86400;

Lower = EpochEndSec-.000001
Upper = EpochEndSec+.000001

For i = 1:1:Index
	If Final_Array(i,1) > Lower & Final_Array(i,1) < Upper
		FBurnEnd_Index = i
	EndIf	
EndFor

%If EpochEnd occurs before End_Time, spacecraft will propagate to each interval to End_Time
FBurnEnd_Index = FBurnEnd_Index + 1

If FBurnEnd_Index <=  Index

If EpochEnd < End_Time
	For i = FBurnEnd_Index:Index
		Burn2Epoch = Final_Array(i,1)/86400 + Start_Time;
		Propagate Prop_norm(MMS3dV_est) {MMS3dV_est.TAIModJulian = Burn2Epoch}
		Report TestFile Burn2Epoch MMS3dV_est.TAIModJulian MMS3dV_est.X MMS3dV_est.Y MMS3dV_est.Z MMS3dV_est.VX MMS3dV_est.VY MMS3dV_est.VZ MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure
	
		If refSatIndex == 1;
			% Output ephem
			Report EphemDvSC4est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 2;
			% Output ephem
			Report EphemDvSC1est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 3;
			% Output ephem
			Report EphemDvSC2est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
		If refSatIndex == 4;
			% Output ephem
			Report EphemDvSC3est   MMS3dV_est.UTCGregorian      MMS3dV_est.TAIModJulian      MMS3dV_est.X      MMS3dV_est.Y      MMS3dV_est.Z      MMS3dV_est.VX      MMS3dV_est.VY      MMS3dV_est.VZ      MMS3dV_est.TankMMS.FuelMass        MMS3dV_est.TankMMS.Pressure        dummyQ dummyQ dummyQ dummyQ navErrType;
		EndIf;
	
	EndFor
EndIf

EndIf

% Fuel Mass calculations - Post Burn
postManeuverMass   = MMS3dV_est.TotalMass;
actualDeltaMass    = abs(preManeuverMass-postManeuverMass);

If actualDeltaMass < 0.00001
	MMS3dV_est.TankMMS.FuelMass = MMS3dV_est.TankMMS.FuelMass - estDeltaMass;
EndIf

estDeltaMassTotal    = estDeltaMassTotal + estDeltaMass;
actualDeltaMassTotal = actualDeltaMassTotal + actualDeltaMass;  

% Record the burn duration up until this point
GMAT BurnCurrent = BurnCurrent + BurnDuration;

Report FBurnDebugRpt preManeuverMass postManeuverMass MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Pressure actualDeltaMass BurnCurrent actualDeltaMassTotal estDeltaMassTotal BurnDuration PropTimeLeft estDeltaMass estDeltaMassAxial estDeltaMassRadial IspRadial IspAxial ThrustAxialSC ThrustRadialSC FlagAxialOn		
EndIf

% ~~ END FINITE BURN FOR SC - 3dV_est
Report FBurnDebugRpt MMSrefSat_truth.TankMMS.Pressure MMSrefSat_truth.TankMMS.FuelMass MMSrefSat_truth.TankMMS.Temperature MMSrefSat_truth.TankMMS.RefTemperature MMSrefSat_truth.TankMMS.Volume MMSrefSat_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_truth.TankMMS.Pressure MMS1dV_truth.TankMMS.FuelMass MMS1dV_truth.TankMMS.Temperature MMS1dV_truth.TankMMS.RefTemperature MMS1dV_truth.TankMMS.Volume MMS1dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_truth.TankMMS.Pressure MMS2dV_truth.TankMMS.FuelMass MMS2dV_truth.TankMMS.Temperature MMS2dV_truth.TankMMS.RefTemperature MMS2dV_truth.TankMMS.Volume MMS2dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_truth.TankMMS.Pressure MMS3dV_truth.TankMMS.FuelMass MMS3dV_truth.TankMMS.Temperature MMS3dV_truth.TankMMS.RefTemperature MMS3dV_truth.TankMMS.Volume MMS3dV_truth.TankMMS.FuelDensity;
Report FBurnDebugRpt MMSrefSat_est.TankMMS.Pressure MMSrefSat_est.TankMMS.FuelMass MMSrefSat_est.TankMMS.Temperature MMSrefSat_est.TankMMS.RefTemperature MMSrefSat_est.TankMMS.Volume MMSrefSat_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS1dV_est.TankMMS.Pressure MMS1dV_est.TankMMS.FuelMass MMS1dV_est.TankMMS.Temperature MMS1dV_est.TankMMS.RefTemperature MMS1dV_est.TankMMS.Volume MMS1dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS2dV_est.TankMMS.Pressure MMS2dV_est.TankMMS.FuelMass MMS2dV_est.TankMMS.Temperature MMS2dV_est.TankMMS.RefTemperature MMS2dV_est.TankMMS.Volume MMS2dV_est.TankMMS.FuelDensity;
Report FBurnDebugRpt MMS3dV_est.TankMMS.Pressure MMS3dV_est.TankMMS.FuelMass MMS3dV_est.TankMMS.Temperature MMS3dV_est.TankMMS.RefTemperature MMS3dV_est.TankMMS.Volume MMS3dV_est.TankMMS.FuelDensity;

tankMassAftFunc(1,1)     = MMSrefSat_est.TankMMS.FuelMass;
tankMassAftFunc(2,1)     = MMS1dV_est.TankMMS.FuelMass;
tankMassAftFunc(3,1)     = MMS2dV_est.TankMMS.FuelMass;
tankMassAftFunc(4,1)     = MMS3dV_est.TankMMS.FuelMass;
tankMassAftFunc(5,1)     = MMSrefSat_truth.TankMMS.FuelMass;
tankMassAftFunc(6,1)     = MMS1dV_truth.TankMMS.FuelMass;
tankMassAftFunc(7,1)     = MMS2dV_truth.TankMMS.FuelMass;
tankMassAftFunc(8,1)     = MMS3dV_truth.TankMMS.FuelMass;
tankPressureAftFunc(1,1) = MMSrefSat_est.TankMMS.Pressure;
tankPressureAftFunc(2,1) = MMS1dV_est.TankMMS.Pressure;
tankPressureAftFunc(3,1) = MMS2dV_est.TankMMS.Pressure;
tankPressureAftFunc(4,1) = MMS3dV_est.TankMMS.Pressure;
tankPressureAftFunc(5,1) = MMSrefSat_truth.TankMMS.Pressure;
tankPressureAftFunc(6,1) = MMS1dV_truth.TankMMS.Pressure;
tankPressureAftFunc(7,1) = MMS2dV_truth.TankMMS.Pressure;
tankPressureAftFunc(8,1) = MMS3dV_truth.TankMMS.Pressure;

Report FBurnDebugRpt tankMassAftFunc tankPressureAftFunc;
