%   SPH Comments: This test script uses the GMAT script language 
%   to convert from the cartesian to the keplerian state.  I only 
%   implemented the conversion for elliptic inclined orbits, as 
%   described in the math spec.  I didn't implement other special 
%   cases, because it would not test anything different in the inline 
%   math. My usual disclaimer:  since GMAT currenty doesn't run this
%   script, I can't be sure it doesn't contain typos, because
%   I can't test it.
%
%   REVSION HISTORY
%   $Id: Bug743-Ex_Cart2KepMathTest.script,v 1.1 2008/09/25 19:03:37 ljun Exp $

%----------------------------------------
%---------- Spacecraft
%----------------------------------------

Create Spacecraft Sat;
GMAT Sat.DateFormat = TAIModJulian;
GMAT Sat.Epoch = 21545.000000000;
GMAT Sat.CoordinateSystem = EarthMJ2000Eq;
GMAT Sat.DisplayStateType = Cartesian;
GMAT Sat.X = 7100;
GMAT Sat.Y = 0;
GMAT Sat.Z = 1300;
GMAT Sat.VX = 0;
GMAT Sat.VY = 7.35;
GMAT Sat.VZ = 1;
GMAT Sat.DryMass = 850;
GMAT Sat.Cd = 2.2;
GMAT Sat.Cr = 1.8;
GMAT Sat.DragArea = 15;
GMAT Sat.SRPArea = 1;


%----------------------------------------
%---------- ForceModels
%----------------------------------------

Create ForceModel Propagator1_ForceModel;
GMAT Propagator1_ForceModel.CentralBody = Earth;
GMAT Propagator1_ForceModel.PrimaryBodies = {Earth};
GMAT Propagator1_ForceModel.Drag = None;
GMAT Propagator1_ForceModel.SRP = Off;
GMAT Propagator1_ForceModel.ErrorControl = RSSStep;
GMAT Propagator1_ForceModel.Gravity.Earth.Degree = 4;
GMAT Propagator1_ForceModel.Gravity.Earth.Order = 4;
GMAT Propagator1_ForceModel.Gravity.Earth.PotentialFile = JGM2.cof;


%----------------------------------------
%---------- Propagators
%----------------------------------------

Create Propagator Prop;
GMAT Prop.FM = Propagator1_ForceModel;
GMAT Prop.Type = RungeKutta89;
GMAT Prop.InitialStepSize = 60;
GMAT Prop.Accuracy = 9.999999999999999e-012;
GMAT Prop.MinStep = 0.001;
GMAT Prop.MaxStep = 2700;
GMAT Prop.MaxStepAttempts = 50;


%----------------------------------------
%---------- Parameters
%----------------------------------------

%   Create variables and arrays that are needed in calculations
Create Variable SMA ECC INC AOP RAAN TA h r v n 
Create Variable Energy rdotv mu ndote edotr x y z vx vy vz
Create Variable pi2 d2r SMAError ECCError INCError RAANError AOPError TAError 
Create Array rv[3,1] vv[3,1] hv[3,1] ev[3,1] nv[3,1] 

%----------------------------------------
%---------- Coordinate Systems
%----------------------------------------

Create CoordinateSystem EarthMJ2000Eq;
GMAT EarthMJ2000Eq.Origin = Earth;
GMAT EarthMJ2000Eq.Axes = MJ2000Eq;
GMAT EarthMJ2000Eq.UpdateInterval = 60;
GMAT EarthMJ2000Eq.OverrideOriginInterval = false;

Create CoordinateSystem EarthMJ2000Ec;
GMAT EarthMJ2000Ec.Origin = Earth;
GMAT EarthMJ2000Ec.Axes = MJ2000Ec;
GMAT EarthMJ2000Ec.UpdateInterval = 60;
GMAT EarthMJ2000Ec.OverrideOriginInterval = false;

Create CoordinateSystem EarthFixed;
GMAT EarthFixed.Origin = Earth;
GMAT EarthFixed.Axes = BodyFixed;
GMAT EarthFixed.UpdateInterval = 60;
GMAT EarthFixed.OverrideOriginInterval = false;


%----------------------------------------
%---------- Plots and Reports
%----------------------------------------

Create XYPlot SMAvsTimeINT;
GMAT SMAvsTimeINT.IndVar = Sat.TAIModJulian;
GMAT SMAvsTimeINT.Add = {Sat.SMA};
GMAT SMAvsTimeINT.Grid = On;
GMAT SMAvsTimeINT.SolverIterations = None;
GMAT SMAvsTimeINT.ShowPlot = true;

Create XYPlot SMAvsTimeScript;
GMAT SMAvsTimeScript.IndVar = Sat.TAIModJulian;
GMAT SMAvsTimeScript.Add = {SMA};
GMAT SMAvsTimeScript.Grid = On;
GMAT SMAvsTimeScript.SolverIterations = None;
GMAT SMAvsTimeScript.ShowPlot = true;

Create XYPlot RAANvsTimeINT;
GMAT RAANvsTimeINT.IndVar = Sat.TAIModJulian;
GMAT RAANvsTimeINT.Add = {Sat.RAAN};
GMAT RAANvsTimeINT.Grid = On;
GMAT RAANvsTimeINT.SolverIterations = None;
GMAT RAANvsTimeINT.ShowPlot = true;

Create XYPlot RAANvsTimeScript;
GMAT RAANvsTimeScript.IndVar = Sat.TAIModJulian;
GMAT RAANvsTimeScript.Add = {RAAN};
GMAT RAANvsTimeScript.Grid = On;
GMAT RAANvsTimeScript.SolverIterations = None;
GMAT RAANvsTimeScript.ShowPlot = true;

%  Create a report to output error data
Create ReportFile Cart2KeptConvert;
%%%GMAT Cart2KeptConvert.Filename = ./output/SampleMissions/Cart2KeptConvert.report;
GMAT Cart2KeptConvert.Filename = Bug743-Cart2KeptConvert.report;
GMAT Cart2KeptConvert.Precision = 16;
GMAT Cart2KeptConvert.WriteHeaders = On;
GMAT Cart2KeptConvert.LeftJustify = On;
GMAT Cart2KeptConvert.ZeroFill = On;
GMAT Cart2KeptConvert.ColumnWidth = 20;
GMAT Cart2KeptConvert.SolverIterations = None;

Create OpenGLPlot OpenGLPlot1;
GMAT OpenGLPlot1.Add = {Sat};
GMAT OpenGLPlot1.OrbitColor = [ 255 ];
GMAT OpenGLPlot1.CoordinateSystem = EarthMJ2000Eq;
GMAT OpenGLPlot1.ViewPointReference = Earth;
GMAT OpenGLPlot1.ViewPointVector = [ 0 0 30000];
GMAT OpenGLPlot1.ViewDirection = Earth;
GMAT OpenGLPlot1.ViewScaleFactor = 1;
GMAT OpenGLPlot1.FixedFovAngle = 45;
GMAT OpenGLPlot1.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT OpenGLPlot1.ViewUpAxis = Z;
GMAT OpenGLPlot1.CelestialPlane = Off;
GMAT OpenGLPlot1.XYPlane = On;
GMAT OpenGLPlot1.WireFrame = Off;
GMAT OpenGLPlot1.SolverIterations = None;
GMAT OpenGLPlot1.Axes = On;
GMAT OpenGLPlot1.Grid = Off;
GMAT OpenGLPlot1.SunLine = Off;
GMAT OpenGLPlot1.UseInitialView = On;
GMAT OpenGLPlot1.PerspectiveMode = Off;
GMAT OpenGLPlot1.UseFixedFov = Off;
GMAT OpenGLPlot1.DataCollectFrequency = 1;
GMAT OpenGLPlot1.UpdatePlotFrequency = 50;
GMAT OpenGLPlot1.NumPointsToRedraw = 0;
GMAT OpenGLPlot1.ShowPlot = true;

Create OpenGLPlot OpenGLPlot2;
GMAT OpenGLPlot2.Add = {Sat};
GMAT OpenGLPlot2.OrbitColor = [ 255 ];
GMAT OpenGLPlot2.CoordinateSystem = EarthMJ2000Eq;
GMAT OpenGLPlot2.ViewPointReference = Earth;
GMAT OpenGLPlot2.ViewPointVector = [ 0 0 30000];
GMAT OpenGLPlot2.ViewDirection = Earth;
GMAT OpenGLPlot2.ViewScaleFactor = 1;
GMAT OpenGLPlot2.FixedFovAngle = 45;
GMAT OpenGLPlot2.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT OpenGLPlot2.ViewUpAxis = X;
GMAT OpenGLPlot2.CelestialPlane = Off;
GMAT OpenGLPlot2.XYPlane = On;
GMAT OpenGLPlot2.WireFrame = Off;
GMAT OpenGLPlot2.SolverIterations = None;
GMAT OpenGLPlot2.Axes = On;
GMAT OpenGLPlot2.Grid = Off;
GMAT OpenGLPlot2.SunLine = Off;
GMAT OpenGLPlot2.UseInitialView = On;
GMAT OpenGLPlot2.PerspectiveMode = Off;
GMAT OpenGLPlot2.UseFixedFov = Off;
GMAT OpenGLPlot2.DataCollectFrequency = 1;
GMAT OpenGLPlot2.UpdatePlotFrequency = 50;
GMAT OpenGLPlot2.NumPointsToRedraw = 0;
GMAT OpenGLPlot2.ShowPlot = true;


%----------------------------------------
%---------- Mission Sequence
%----------------------------------------

BeginMissionSequence;

BeginScript
   %  Define constants
   GMAT pi2 = 6.283185307179586;
   GMAT d2r = .017453292519943295770;
   GMAT mu = 398600.4415;
   GMAT SMA = 7191.870446001621;
   GMAT RAAN = 306.614;
EndScript;


%%%While Sat.ElapsedDays < 1.0
While Sat.ElapsedDays < 0.2
   Propagate Prop(Sat);
   %  This script event is long!! and calculates all 6 keplerian elements
   %  according to the algorithm in the GMAT math spec.
   BeginScript
      %  Define individual cartesian states
      GMAT x = Sat.X;
      GMAT y = Sat.Y;
      GMAT z = Sat.Z;
      GMAT vx = Sat.VX;
      GMAT vy = Sat.VY;
      GMAT vz = Sat.VZ;
      GMAT rv(1, 1) = x;
      GMAT rv(2, 1) = y;
      GMAT rv(3, 1) = z;
      GMAT vv(1, 1) = vx;
      GMAT vv(2, 1) = vy;
      GMAT vv(3, 1) = vz;
      %  Calculate the angular momentum and its magnitude
      GMAT hv(1, 1) = y*vz-z*vy;
      GMAT hv(2, 1) = z*vx-x*vz;
      GMAT hv(3, 1) = x*vy-y*vx;
      GMAT h = sqrt( hv(1,1)^2 +  hv(2,1)^2 +  hv(3,1)^2 );
      %  Calculate the vector in the direction of the line of nodes
      % THERE'S A BUG THIS WAY:  GMAT nv(1,1) = -z*vx+x*vz;
      GMAT nv(1, 1) = x*vz-z*vx;
      GMAT nv(2, 1) = y*vz-z*vy;
      GMAT nv(3, 1) = 0;
      GMAT n = sqrt( nv(1,1)^2 +  nv(2,1)^2 +  nv(3,1)^2 );
      %  Calculate the magnitude of position and velocity
      GMAT r = sqrt( x^2 +   y^2  + z^2 );
      GMAT v = sqrt( vx^2 + vy^2 + vz^2 );
      %  Calculate the eccentricity vector
      GMAT rdotv = x*vx + y*vy + z*vz;
      GMAT ev = ( ( v^2 - mu/r )*rv - rdotv*vv  ) / mu;    %  This should make a column vector!!
      GMAT ECC = sqrt( ev(1,1)^2 +  ev(2,1)^2 +  ev(3,1)^2 );
      %  Calculate the Energy, SMA and INC
      GMAT Energy = v^2/2 - mu/r;
      GMAT SMA = -mu/2/Energy;
      GMAT INC = acos(hv(3,1)/h);
      %  Calculate RAAN
      GMAT RAAN = acos( nv(1,1)/n );
      %  Fix quadrant
      If nv(2,1) < 0
         GMAT RAAN = pi2 - RAAN;
      EndIf;
      %  Calculate AOP
      GMAT ndote = nv(1,1)*ev(1,1) + nv(2,1)*ev(2,1) + nv(3,1)*ev(3,1);
      GMAT AOP = acos(ndote/(n*ECC));
      %  Fix quadrant
      If ev(3,1) < 0
         GMAT AOP = pi2 - AOP;
      EndIf;
      %  Calculate TA
      GMAT edotr = rv(1,1)*ev(1,1) + rv(2,1)*ev(2,1) + rv(3,1)*ev(3,1);
      GMAT TA = acos(edotr/(ECC*r));
      %  Fix quadrant
      If rdotv < 0
         GMAT TA = pi2 - TA;
      EndIf;  % rdotv < 0
   EndScript;

   %  Compare the elements calculated in the script with those calculated internally by GMAT
   BeginScript
      %%GMAT Convert Angles to degrees
      GMAT INC = INC/d2r;
      GMAT RAAN = RAAN/d2r;
      GMAT AOP = AOP/d2r;
      GMAT TA = TA/d2r;
      GMAT SMAError = SMA - Sat.SMA;
      GMAT ECCError = ECC - Sat.ECC;
      GMAT INCError = INC - Sat.INC;
      GMAT RAANError = RAAN - Sat.RAAN;
      GMAT AOPError = AOP  - Sat.AOP;
      GMAT TAError = TA   - Sat.TA;
      Report Cart2KeptConvert SMAError ECCError INCError RAANError AOPError TAError 
   EndScript;

EndWhile;


