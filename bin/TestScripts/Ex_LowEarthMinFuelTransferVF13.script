%  Script Mission - Optimization Example
%
%  This script demonstrates how to use an Optimize sequence
%
%  REVSION HISTORY
%  $Id: Ex_LowEarthMinFuelTransfer.script,v 1.3 2007/05/15 18:24:50 shughes Exp $

%-----------------------------------------------------------------
%------------------Create The Spacecraft--------------------------
%-----------------------------------------------------------------
Create Spacecraft Sat;
GMAT Sat.DateFormat = TAIModJulian;
GMAT Sat.Epoch = 21545;
GMAT Sat.CoordinateSystem = EarthMJ2000Eq;
GMAT Sat.StateType = Keplerian;
GMAT Sat.SMA = 7500;
GMAT Sat.ECC = 0;
GMAT Sat.INC = 0;
GMAT Sat.RAAN = 45;
GMAT Sat.AOP = 0;
GMAT Sat.TA = 360;
GMAT Sat.DryMass = 850;
GMAT Sat.Cd = 2.2;
GMAT Sat.Cr = 1.8;
GMAT Sat.DragArea = 15;
GMAT Sat.SRPArea = 1;

Create Spacecraft DummySat;
GMAT DummySat.StateType = Cartesian;

%-----------------------------------------------------------------
%--------------------Create The Force Model-----------------------
%-----------------------------------------------------------------
Create ForceModel DefaultProp_ForceModel;
GMAT DefaultProp_ForceModel.CentralBody = Earth;
GMAT DefaultProp_ForceModel.PointMasses = {Earth};
GMAT DefaultProp_ForceModel.Drag = None;
GMAT DefaultProp_ForceModel.SRP = Off;
GMAT DefaultProp_ForceModel.ErrorControl = RSSStep;

Create Propagator DefaultProp;
GMAT DefaultProp.FM = DefaultProp_ForceModel;
GMAT DefaultProp.Type = RungeKutta89;
GMAT DefaultProp.InitialStepSize = 60;
GMAT DefaultProp.Accuracy = 1e-012;
GMAT DefaultProp.MinStep = 0.001;
GMAT DefaultProp.MaxStep = 2700;
GMAT DefaultProp.MaxStepAttempts = 50;

%-----------------------------------------------------------------
%------------------------------OutPut-----------------------------
%-----------------------------------------------------------------
Create OpenGLPlot DefaultOpenGL;
GMAT DefaultOpenGL.Add = {Sat, Earth};
GMAT DefaultOpenGL.CoordinateSystem = EarthMJ2000Eq;
GMAT DefaultOpenGL.ViewPointRef = Earth;
GMAT DefaultOpenGL.ViewPointVector = Vector;
GMAT DefaultOpenGL.ViewDirection = Earth;
GMAT DefaultOpenGL.ViewScaleFactor = 1;
GMAT DefaultOpenGL.FixedFovAngle = 45;
GMAT DefaultOpenGL.ViewUpCoordinateSystem = EarthMJ2000Eq;
GMAT DefaultOpenGL.ViewUpAxis = X;
GMAT DefaultOpenGL.CelestialPlane = Off;
GMAT DefaultOpenGL.XYPlane = On;
GMAT DefaultOpenGL.WireFrame = Off;
GMAT DefaultOpenGL.TargetStatus = On;
GMAT DefaultOpenGL.Axes = Off;
GMAT DefaultOpenGL.Grid = Off;
GMAT DefaultOpenGL.EarthSunLines = Off;
GMAT DefaultOpenGL.UseInitialView = On;
GMAT DefaultOpenGL.PerspectiveMode = Off;
GMAT DefaultOpenGL.UseFixedFov = Off;
GMAT DefaultOpenGL.DataCollectFrequency = 2; 
GMAT DefaultOpenGL.UpdatePlotFrequency = 50;
GMAT DefaultOpenGL.NumPointsToRedraw = 100;
GMAT DefaultOpenGL.ShowPlot = true;

Create ReportFile IterateData;
GMAT IterateData.Filename = ./output/SampleMissions/Ex_LowEarthMinFuelTransfer.report;
GMAT IterateData.Precision = 10;
GMAT IterateData.WriteHeaders = On; 
GMAT IterateData.ColumnWidth = 16;

Create XYPlot CostPlot
CostPlot.IndVar = Iterate;
CostPlot.Add    = Cost;

Create XYPlot SMAPlot
SMAPlot.IndVar = Iterate;
SMAPlot.Add    = Sat.SMA;

Create XYPlot ECCPlot
ECCPlot.IndVar = Iterate;
ECCPlot.Add    = Sat.ECC;

Create XYPlot INCPlot
INCPlot.IndVar = Iterate;
INCPlot.Add    = Sat.INC;

Create String SolutionData
SolutionData = '------------- Solution Data -----------------'

%-----------------------------------------------------------------
%-----------------Create and Setup the Optimizer------------------
%-----------------------------------------------------------------
Create VF13ad vf13
vf13.Tolerance = 1.0e-11
vf13.MaximumIterations = 1000;


%-----------------------------------------------------------------
%--------------------------Create Maneuvers-----------------------
%-----------------------------------------------------------------

Create ImpulsiveBurn dv1;
GMAT dv1.Origin = Earth;
GMAT dv1.Axes   = VNB;

Create ImpulsiveBurn dv2;
GMAT dv2.Origin = Earth;
GMAT dv2.Axes   = VNB;

Create Variable TOF dV1Time Cost Constraint1 Constraint2 Constraint3...
                          dV1mag dV2mag RefEpoch PropEpoch Iterate;

%*****************************************************************
%-----------------------------------------------------------------
%-------------------The Mission Sequence--------------------------
%-----------------------------------------------------------------
%*****************************************************************

%  This can be removed when Plot Command is implemented.
Toggle CostPlot Off;
Toggle SMAPlot  Off;
Toggle ECCPlot  Off;
Toggle INCPlot  Off;


Propagate DefaultProp(Sat, {Sat.ElapsedSecs = Sat.OrbitPeriod});
RefEpoch = Sat.A1ModJulian;

%  The optimization sequence below demonstrates how to use an SQP 
%  routine in GMAT to solve a minimum fuel orbit transfer using 
%  two impulsive maneuvers.  The optimization variables are the 
%  the components of both delta vs (6 variables).... and the TOF
Iterate = 0;
Optimize vf13
    
   %  Increment the loop counter
   Iterate = Iterate + 1;

   %------------------------------
   %  Propagate to location of the 
   %  second maneuver
   %------------------------------
   %  Vary the tranfer time of flight 
   %Vary vf13( dV1Time =  .1,  { Lower = -.5, Upper = 0.5, MultiplicativeScaleFactor = 10} ); 
   PropEpoch = RefEpoch + dV1Time;
   If dV1Time > 0;
     Propagate DefaultProp(Sat)  { Sat.A1ModJulian = PropEpoch};  
   EndIf;
   If dV1Time < 0;
     Propagate -DefaultProp(Sat) { Sat.A1ModJulian = PropEpoch};  
   EndIf;

   %-------------------------------------------------
   %  Vary all three components of the first maneuver
   %  Using the optimizer
   %-------------------------------------------------
   Vary vf13( dv1.Element1 = .1 ,  { Lower = -5, Upper = 5, ...
                   AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.0000001  } );
   Vary vf13( dv1.Element2 = .01 , { Lower = -5, Upper = 5, ...
                   AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.0000001 } );
   Vary vf13( dv1.Element3 = .01,  { Lower = -5, Upper = 5, ...
                   AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.0000001 } );
   Maneuver  dv1(Sat); 
  
   %------------------------------
   %  Propagate to location of the 
   %  second maneuver
   %------------------------------
   %  Vary the tranfer time of flight 
   Vary vf13( TOF = .1,  { Lower = 0, Upper = 1, MultiplicativeScaleFactor = 10, Perturbation = 0.001} ); 
   If TOF > 0.0
      PropEpoch = RefEpoch + TOF;
      Propagate DefaultProp(Sat)  { Sat.A1ModJulian = PropEpoch};  
   EndIf

   %-------------------------------------------------
   %  Vary all three components of the second maneuver
   %  Using the optimizer
   %-------------------------------------------------
   Vary vf13( dv2.Element1 = .1 ,  { Lower = -5, Upper = 5 , ...
                    AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.000001 } );
   Vary vf13( dv2.Element2 = .01 , { Lower = -5, Upper = 5 , ...
                    AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.000001  } );
   Vary vf13( dv2.Element3 = .01 , { Lower = -5, Upper = 5 , ...
                    AdditiveScaleFactor = 0, MultiplicativeScaleFactor = 1, Perturbation = 0.000001 } );
   Maneuver  dv2(Sat);

   %-------------------------------------------------
   %  Apply constraints to be satisfied
   %  After the maneuvers sequence is complete
   %-------------------------------------------------
   %  Apply constraints on final orbit
   Constraint1 = Sat.SMA/10000;
   Constraint2 = Sat.ECC;
   Constraint3 = Sat.INC;
   %  The variables Constraint* are only necessary until bug 846 us fixed.
   NonlinearConstraint vf13( Constraint1 = 1 );    % SMA Constraint
   NonlinearConstraint vf13( Constraint2 = 0.05  );    % ECC Constraint 
   NonlinearConstraint vf13( Constraint3 = 5     );    % INC Constraint

   %-------------------------------------------------
   %  Calculate the cost function
   %-------------------------------------------------
   GMAT dV1mag = sqrt( dv1.Element1^2 + dv1.Element2^2 + dv1.Element3^2 );
   GMAT dV2mag = sqrt( dv2.Element1^2 + dv2.Element2^2 + dv2.Element3^2 );
   GMAT Cost = ( dV1mag + dV2mag );
   Minimize vf13( Cost ); 
  

   %-------------------------------------------------
   %  Update Reports and Plots
   %-------------------------------------------------
   BeginScript
      Report IterateData dV1Time TOF Cost Sat.SMA Sat.ECC Sat.INC

      %  This can be removed when Plot Command is implemented.
      Toggle CostPlot On;
      Toggle SMAPlot  On;
      Toggle ECCPlot  On;
      Toggle INCPlot  On;
      Propagate DefaultProp(DummySat)  ; 
      Toggle CostPlot Off; 
      Toggle SMAPlot  Off;
      Toggle ECCPlot  Off;
      Toggle INCPlot  Off;
   EndScript

EndOptimize

Report IterateData SolutionData;
Report IterateData TOF Cost
Report IterateData  Sat.SMA Sat.ECC Sat.INC
Report IterateData dv1.Element1  dv1.Element2  dv1.Element3
Report IterateData dv2.Element1  dv2.Element2 dv2.Element3 

Propagate DefaultProp(Sat, {Sat.ElapsedSecs = Sat.OrbitPeriod});

