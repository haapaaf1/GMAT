%   REVISION HISTORY
%   Author      Date            Comment
%               (MM/DD/YYYY)
%   E.Dove      3/06/2006      Original
%   E.Dove      9/10/2007      Last Modified
%   $Id: DifferenceReport.m,v 1.2 2007/09/10 21:18:55 edove Exp $

rerunScript = 1;
while size(rerunScript,1) ~= 0
    clc
    clear all
    close all
    rerunScript = 1;
    format long
    tempDir = mfilename('fullpath');
    if ispc
        temp = findstr(tempDir,'\');
        compareDir = tempDir(1:temp(size(temp,2))-1);
    else
        temp = findstr(tempDir,'/');
        compareDir = tempDir(1:temp(size(temp,2))-1);
    end
    cd(compareDir);
    cd('..');
    cd('..');
    mainDir = cd;
    cd('..');
    cvsRootDir = cd;
    cd(compareDir);
    
    % Initialize variables
    DataDir      = [mainDir,'/output/AcceptTest/CompareResults'];
    folderCount  = 0;
    matCount     = 0;
    groupTraj    = {0};
    countTraj    = 0;
    countTrajRun = 0;
    plotCount    = 1;
    normFlag = 0;

    % Convert backslash to forwardslash
    % Helps allow code to be used on multiple platforms
    findSlash = findstr(mainDir,'\');
    if isempty(findSlash)
    else
        for loop = 1:size(findSlash,1)
            mainDir(findSlash(loop)) = '/';
        end

    end

    % Displaying welcome message
    disp('Welcome to the GMAT Acceptance Test Plan (ATP) plot generation tool');
    disp('for comparison data generated by ATP comparison scripts.');
    disp('** Make sure that the comparison mat files of interest contain the latest data. **');
    disp('** Rerun the comparison script if uncertain before running this script. **');
    disp('Press ENTER to continue.');
    disp(' ');
    pause

    disp(' ');
    disp('Choose the comparison folder');
    disp('=============================');
    temp = dir(DataDir);
    loopFolder = size(temp,1);

    % Search for folders that have GMAT script files.
    for loop = 1:loopFolder
        if (temp(loop).isdir == 1) & (strcmp(temp(loop).name,'.')==0 & strcmp(temp(loop).name,'..')==0)
            folderCount = folderCount + 1;
            validFolder{folderCount,1} = temp(loop).name;
            disp([num2str(folderCount),'. ',validFolder{folderCount,1}]);
        end
    end
    folderMenu = size(validFolder,1); % Total number of options user can choose from

    % User inputs value. Program warns the user of any incorrectly entered value
    error = 1;
    folderChoice = input('Choice: ');
    disp(' ');
    while error == 1
        error = 2;
        while error == 2
            if size(folderChoice,1) ~= 0
                break
            else
                error = 2;
                disp('You have entered an incorrect value. Please try again.');
                folderChoice = input('Choice: ');
                disp(' ');
            end
        end
        if folderChoice ~= [1:folderMenu]
            error = 1;
            disp('You have entered an incorrect value. Please try again.');
            folderChoice = input('Choice: ');
            disp(' ');
        else
            break
        end
    end

    folder = validFolder{folderChoice};
    findUScore = findstr(folder,'_');
    Tool1 = folder(1:(findUScore(1)-1));
    Tool2 = folder((findUScore(1)+1):size(folder,2));
    matFiles = dir([DataDir,'/',folder,'/*.mat']);
    numMats = size(matFiles,1);

    if numMats == 0
        disp('There are no relevant mat files in the selected directory. Check for mat files');
        disp(['in the following folder: ',DataDir,'/',folder]);
        disp('Then try re-running this script');
        return
    end

    disp(' ');
    disp('Choose the comparison type');
    disp('=============================');
    Propagator = 'Propagator';
    CS = 'CSParams';
    Cb = 'CbParams';
    Libration = 'LibrationTest';
    reportList = {Propagator,CS,Cb,Libration}.'; % Always add new options to the end of the list

    disp(['1. ', Propagator]);
    disp(['2. ', CS]);
    disp(['3. ', Cb]);
    disp(['4. ', Libration]);
    reportMenu = size(reportList,1);

    % User inputs value. Program warns the user of any incorrectly entered value
    error = 1;
    reportChoice = input('Choice: ');
    disp(' ');
    while error == 1
        error = 2;
        while error == 2
            if size(reportChoice,1) ~= 0
                break
            else
                error = 2;
                disp('You have entered an incorrect value. Please try again.');
                reportChoice = input('Choice: ');
                disp(' ');
            end
        end
        if reportChoice ~= [1:reportMenu]
            error = 1;
            disp('You have entered an incorrect value. Please try again.');
            reportChoice = input('Choice: ');
            disp(' ');
        else
            break
        end
    end

    % Search for folders that have the relevant comparison mat files.
    for loop = 1:numMats
        if reportChoice == 1
            compTypeFlag = (isempty(findstr(matFiles(loop).name,Libration)) & isempty(findstr(matFiles(loop).name,Cb)) & isempty(findstr(matFiles(loop).name,CS)));
        elseif (reportChoice == 2) | (reportChoice == 3) | (reportChoice == 4)
            compTypeFlag = (isempty(findstr(matFiles(loop).name,reportList{reportChoice,1})) == 0);
        end
        if compTypeFlag
            matCount = matCount + 1;
            validMat{matCount,1} = matFiles(loop).name;
        end
    end
    for loop = 1:size(validMat,1)
        findTraj = findstr(validMat{loop,1},'_');
        if reportChoice == 1
            currTraj{loop,1} = validMat{loop,1}((findTraj(2)+1):(findTraj(3)-1)); % Obtain the name of the current trajectory
        elseif (reportChoice == 2) | (reportChoice == 3) | (reportChoice == 4)
            currTraj{loop,1} = validMat{loop,1}((findTraj(3)+1):(findTraj(4)-1)); % Obtain the name of the current trajectory
        end
    end

    % Group similar cases together
    groupTraj{1,1} = currTraj{1,1};
    groupTraj{1,2} = 0;
    newTrajCount = 1;
    compareLoop = 1;

    for loop = 1:size(currTraj,1)
        if compareLoop == loop
            groupTraj{newTrajCount,2} = size(strmatch(groupTraj{newTrajCount,1},currTraj,'exact'),1);
            compareLoop = compareLoop + groupTraj{newTrajCount,2};
            if compareLoop > size(currTraj,1)
                break
            end
            newTrajCount = newTrajCount + 1;
            groupTraj{newTrajCount,1} = currTraj{compareLoop,1};
            groupTraj{newTrajCount,2} = 0;
        end
    end

    % Display test case groups
    disp(' ');
    disp('Choose the test case group');
    disp('=============================');
    numTrajs = size(groupTraj,1);
    for loop = 1:numTrajs
        disp([num2str(loop),'. ',groupTraj{loop,1}]);
    end
    matMenu = numTrajs; % Total number of options user can choose from

    % User inputs value. Program warns the user of any incorrectly entered value
    error = 1;
    matChoice = input('Choice: ');
    disp(' ');
    while error == 1
        error = 2;
        while error == 2
            if size(matChoice,1) ~= 0
                break
            else
                error = 2;
                disp('You have entered an incorrect value. Please try again.');
                matChoice = input('Choice: ');
                disp(' ');
            end
        end
        if matChoice ~= [1:matMenu]
            error = 1;
            disp('You have entered an incorrect value. Please try again.');
            matChoice = input('Choice: ');
            disp(' ');
        else
            break
        end
    end

    matGroup = groupTraj{matChoice,1};
    for loop = 1:size(validMat,1)
        if isempty(findstr(validMat{loop,1} ,['_',groupTraj{matChoice,1},'_'])) == 0;
            matLocation = loop; % Of the valid mat files, obtain the row location of the one choosen
            break
        end
    end

    disp(['Generating Figures. Please be patient.']);
    disp(' ');
    warning off
    mkdir([DataDir,'/',folder,'/plots']);
    warning on

    for plotLoop = matLocation:(matLocation + groupTraj{matChoice,2} - 1)
        load('-mat', [DataDir,'/',folder,'/',validMat{plotLoop,1}]);
        if exist('diffMat_Tool1_Tool2')
            normFlag = 0; % No normalizing took place during the differencing of data
        elseif exist('normMat_Tool1_Tool2')
            normFlag = 1; % Normalizing took place during the differencing of data
        end
        % ==== Convert underscores to dashes for the current case name, since Figures handle underscores differently
        underLoc  = findstr(validMat{plotLoop,1},'_');

        if size(underLoc,2) == 1
            validMatD = [validMat{plotLoop,1}(1:(underLoc(1)-1)),'-',validMat{plotLoop,1}((underLoc(1)+1):size(validMat{plotLoop,1},2))];
        else
            validMatD = [validMat{plotLoop,1}(1:(underLoc(1)-1)),'-'];
            for innerLoop = 1:size(underLoc,2)
                if innerLoop == size(underLoc,2)
                    validMatD = [validMatD,validMat{plotLoop,1}((underLoc(size(underLoc,2))+1):size(validMat{plotLoop,1},2))];
                else
                    validMatD = [validMatD,validMat{plotLoop,1}((underLoc(innerLoop)+1):(underLoc(innerLoop+1)-1)),'-'];
                end
            end
        end
        
        % ================================================================
        if (reportChoice == 1) | (reportChoice == 4)
            % ==== Plot position difference ====
            figure(plotCount); clf
            if normFlag == 1
                plot(normMat_Tool1_Tool2(:,1),normMat_Tool1_Tool2(:,2));
            else
                plot(diffMat_Tool1_Tool2(:,1),diffMat_Tool1_Tool2(:,2));
            end
            title({[Tool1,'/',Tool2,'Comparison (Position) Difference Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
            xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
            ylabel('Position Difference (km)','FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
            grid on;
            saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(pos)'],'fig');
            plotCount = plotCount + 1;
            % ==================================

            % ==== Plot velocity difference ====
            figure(plotCount); clf
            if normFlag == 1
                plot(normMat_Tool1_Tool2(:,1),normMat_Tool1_Tool2(:,3));
            else
                plot(diffMat_Tool1_Tool2(:,1),diffMat_Tool1_Tool2(:,3));
            end
            title({[Tool1,'/',Tool2,'Comparison (Velocity) Difference Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
            xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
            ylabel('Velocity Difference (km/s)','FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
            grid on;
            saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(vel)'],'fig');
            plotCount = plotCount + 1;
            % ==================================
            
            % ==== Plot VNB components of velocity difference  ====
            numSteps = size(mat_Tool21,1);
            for loop = 1:numSteps
                RotVNB2Cart{loop,1} = RCart2VNB(mat_Tool21(loop,2:7));
                CartRerror = mat_Tool11(:,2:4) - mat_Tool21(:,2:4);
                VNB_r_error(loop,:) = RotVNB2Cart{loop}*CartRerror(loop,:)';
            end

            % V component
            figure(plotCount); clf
            plot(mat_Tool11(:,1),VNB_r_error(:,1))
            title({[Tool1,'/',Tool2,' Position Difference, due to V Velocity of VNB, Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
            xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
            ylabel('Position Difference (km)','FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
            grid on;
            saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(VofVNBpos)'],'fig');
            plotCount = plotCount + 1;
            
            % N component
            figure(plotCount); clf
            plot(mat_Tool11(:,1),VNB_r_error(:,2))
            title({[Tool1,'/',Tool2,' Position Difference, due to N Velocity of VNB, Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
            xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
            ylabel('Position Difference (km)','FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
            grid on;
            saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(NofVNBpos)'],'fig');            
            plotCount = plotCount + 1;
            
            % B component
            figure(plotCount); clf
            plot(mat_Tool11(:,1),VNB_r_error(:,3))
            title({[Tool1,'/',Tool2,' Position Difference, due to B Velocity of VNB, Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
            xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
            ylabel('Position Difference (km)','FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
            grid on;
            saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(BofVNBpos)'],'fig');           
            plotCount = plotCount + 1;
            % ==================================
        elseif (reportChoice == 2) | (reportChoice == 3)
            for loop = 1:size(mat_header,2)
                if isempty(findstr(mat_header{1,loop},'('))
                    mat_headerNew{1,loop} = mat_header{1,loop};
                else
                    findParen = findstr(mat_header{1,loop},'(');
                    mat_headerNew{1,loop} = mat_header{1,loop}(1:findParen(size(findParen,2))-1);
                end
            end

            for innerPlotLoop = 2:size(mat_header,2)
                % ==== Plot parameter difference ====
                figure(plotCount); clf
                if normFlag == 1
                    plot(normMat_Tool1_Tool2(:,1),normMat_Tool1_Tool2(:,innerPlotLoop));
                else
                    plot(diffMat_Tool1_Tool2(:,1),diffMat_Tool1_Tool2(:,innerPlotLoop));
                end
                title({[Tool1,'/',Tool2,'Comparison ',mat_headerNew{1,innerPlotLoop},' Difference Plot'];['for ',validMatD]},'Color','k','FontSize',8,'FontWeight','bold');
                xlabel('Time (seconds)','FontSize',8,'FontWeight','bold');           % Plot X-axis Label
                ylabel(mat_header{1,innerPlotLoop},'FontSize',8,'FontWeight','bold'); % Plot Y-axis Label
                grid on;
                saveas(figure(plotCount),[DataDir,'/',folder,'/plots/',validMat{plotLoop,1}(1:(size(validMat{plotLoop,1},2)-4)),'(',mat_headerNew{1,innerPlotLoop},').fig'],'fig');
                plotCount = plotCount + 1;
                % ==================================
            end
        end
    end

    disp('Plots created, displayed, and saved (in Matlab fig file format)');
    disp(['Plot save location: ',DataDir,'/',folder,'/plots/']);

    cd(compareDir);

    disp(' ');
    disp('Press any alpha-numeric key and then ENTER to rerun this script or');
    disp('Press ENTER to exit.');
    rerunScript = input('');
end