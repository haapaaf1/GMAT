function [methodinfo,structs,enuminfo,ThunkLibName]=gmatCwrapper
%GMATCWRAPPER Create structures to define interfaces found in 'CGmatInterface'.

%This function was generated by loadlibrary.m parser version 1.1.6.34 on Wed May 11 14:22:03 2011
%perl options:'CGmatInterface.i -outfile=gmatCwrapper.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% const char * getLastMessage (); 
fcns.name{fcnNum}='getLastMessage'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int StartGmat (); 
fcns.name{fcnNum}='StartGmat'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int LoadScript ( const char * scriptName ); 
fcns.name{fcnNum}='LoadScript'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int RunScript (); 
fcns.name{fcnNum}='RunScript'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int LoadAndRunScript ( const char * scriptName ); 
fcns.name{fcnNum}='LoadAndRunScript'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int FindOdeModel ( const char * modelName ); 
fcns.name{fcnNum}='FindOdeModel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int GetStateSize (); 
fcns.name{fcnNum}='GetStateSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const char * GetStateDescription (); 
fcns.name{fcnNum}='GetStateDescription'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int CountObjects (); 
fcns.name{fcnNum}='CountObjects'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const char * GetObjectName ( int which ); 
fcns.name{fcnNum}='GetObjectName'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% const char * GetRunSummary (); 
fcns.name{fcnNum}='GetRunSummary'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% double * GetState (); 
fcns.name{fcnNum}='GetState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const double * GetDerivativesForState ( double epoch , double state [], int stateDim , double dt , int order , int * pdim ); 
fcns.name{fcnNum}='GetDerivativesForState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'int32', 'double', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int SetState ( double epoch , double state [], int stateDim ); 
fcns.name{fcnNum}='SetState'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% const double * GetDerivatives ( double dt , int order , int * pdim ); 
fcns.name{fcnNum}='GetDerivatives'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'double', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
structs.ODEModel.members=struct('');
structs.GmatState.members=struct('');
structs.COdeModel.members=struct('theOdes', 'ODEModelPtr', 'state', 'GmatStatePtr');
methodinfo=fcns;