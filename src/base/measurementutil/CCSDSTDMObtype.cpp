#include "CCSDSTDMObtype.hpp"

//---------------------------------
//  static data
//---------------------------------

const std::string CCSDSTDMObtype::CCSDS_TDM_FILEFORMAT_DESCRIPTIONS[EndCCSDSTDMDataReps] =
{
    "CCSDS Version",
    "Creation Date",
    "Originator",
    "HeaderComments",
    "MetadataComments",
    "TimeSystem",
    "StartTime",
    "StopTime",
    "Participant1",
    "Participant2",
    "Participant3",
    "Participant4",
    "Participant5",
    "Mode",
    "Path",
    "Path1",
    "Path2",
    "TransmitBand",
    "ReceiveBand",
    "TurnaroundNumerator",
    "TurnaroundDenominator",
    "TimeTagReference",
    "IntegrationInterval",
    "IntegrationReference",
    "FrequencyOffset",
    "RangeMode",
    "RangeModulus",
    "RangeUnits",
    "AngleType",
    "ReferenceFrame",
    "TransmitDelay1",
    "TransmitDelay2",
    "TransmitDelay3",
    "TransmitDelay4",
    "TransmitDelay5",
    "ReceiveDelay1",
    "ReceiveDelay2",
    "ReceiveDelay3",
    "ReceiveDelay4",
    "ReceiveDelay5",
    "DataQuality",
    "CorrectionAngle1",
    "CorrectionAngle2",
    "CorrectionDoppler",
    "CorrectionRange",
    "CorrectionReceive",
    "CorrectionTransmit",
    "CorrectionApplied",
    "Angle1TimeTag",
    "Angle1",
    "Angle1Units",
    "Angle2TimeTag",
    "Angle2",
    "Angle2Units",
    "CarrierPowerTimeTag",
    "CarrierPower",
    "CarrierPowerUnits",
    "ClockBiasTimeTag",
    "ClockBias",
    "ClockBiasUnits",
    "ClockDriftTimeTag",
    "ClockDrift",
    "ClockDriftUnits",
    "DopplerInstantaneousTimeTag",
    "DopplerInstantaneous",
    "DopplerInstantaneousUnits",
    "DopplerIntegratedTimeTag",
    "DopplerIntegrated",
    "DopplerIntegratedUnits",
    "DORTimeTag",
    "DOR",
    "DORUnits",
    "PCN0TimeTag",
    "PCN0",
    "PCN0Units",
    "PRN0TimeTag",
    "PRN0",
    "PRN0Units",
    "PressureTimeTag",
    "Pressure",
    "PressureUnits",
    "RangeTimeTag",
    "Range",
    "RangeUnits",
    "ReceiveFrequencyTimeTag",
    "ReceiveFrequency",
    "ReceiveFrequencyUnits",
    "ReceiveFrequency1TimeTag",
    "ReceiveFrequency1",
    "ReceiveFrequency1Units",
    "ReceiveFrequency2TimeTag",
    "ReceiveFrequency2",
    "ReceiveFrequency2Units",
    "ReceiveFrequency3TimeTag",
    "ReceiveFrequency3",
    "ReceiveFrequency3Units",
    "ReceiveFrequency4TimeTag",
    "ReceiveFrequency4",
    "ReceiveFrequency4Units",
    "ReceiveFrequency5TimeTag",
    "ReceiveFrequency5",
    "ReceiveFrequency5Units",
    "RelativeHumidityTimeTag",
    "RelativeHumidity",
    "RelativeHumidityUnits",
    "STECTimeTag",
    "STEC",
    "STECUnits",
    "TemperatureTimeTag",
    "Temperature",
    "TemperatureUnits",
    "TransmitFrequency1TimeTag",
    "TransmitFrequency1",
    "TransmitFrequency1Units",
    "TransmitFrequency2TimeTag",
    "TransmitFrequency2",
    "TransmitFrequency2Units",
    "TransmitFrequency3TimeTag",
    "TransmitFrequency3",
    "TransmitFrequency3Units",
    "TransmitFrequency4TimeTag",
    "TransmitFrequency4",
    "TransmitFrequency4Units",
    "TransmitFrequency5TimeTag",
    "TransmitFrequency5",
    "TransmitFrequency5Units",
    "TransmitFrequencyRate1TimeTag",
    "TransmitFrequencyRate1",
    "TransmitFrequencyRate1Units",
    "TransmitFrequencyRate2TimeTag",
    "TransmitFrequencyRate2",
    "TransmitFrequencyRate2Units",
    "TransmitFrequencyRate3TimeTag",
    "TransmitFrequencyRate3",
    "TransmitFrequencyRate3Units",
    "TransmitFrequencyRate4TimeTag",
    "TransmitFrequencyRate4",
    "TransmitFrequencyRate4Units",
    "TransmitFrequencyRate5TimeTag",
    "TransmitFrequencyRate5",
    "TransmitFrequencyRate5Units",
    "TropoDryTimeTag",
    "TropoDry",
    "TropoDryUnits",
    "TropoWetTimeTag",
    "TropoWet",
    "TropoWetUnits",
    "VLBITimeTag",
    "VLBI",
    "VLBIUnits"
};

const bool CCSDSTDMObtype::CCSDS_TDM_IS_REQUIRED[EndCCSDSTDMDataReps] =
{
    true,
    true,
    true,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false,
    true,
    true,
    false
};

const Gmat::ParameterType CCSDSTDMObtype::CCSDS_TDM_PARAMETER_TYPE[EndCCSDSTDMDataReps] =
{
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::INTEGER_TYPE,
    Gmat::INTEGER_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::REAL_TYPE,
    Gmat::BOOLEAN_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE,
    Gmat::STRING_TYPE,
    Gmat::REAL_TYPE,
    Gmat::STRING_TYPE
};

//------------------------------------------------------------------------------
//  CCSDSTDMObtype()
//------------------------------------------------------------------------------
/**
 * Constructor for the obtype class
 */
//------------------------------------------------------------------------------
CCSDSTDMObtype::CCSDSTDMObtype()
{
}

//------------------------------------------------------------------------------
//  ~CCSDSTDMObtype()
//------------------------------------------------------------------------------
/**
 * Destructor for the obtype class
 */
//------------------------------------------------------------------------------
CCSDSTDMObtype::~CCSDSTDMObtype()
{
}

//---------------------------------------------------------------------------
//  bool IsParameterRequired(const Integer id) const
//---------------------------------------------------------------------------
/**
 * Checks to see if the requested parameter is required by the data format.
 *
 * @param <id> Description for the parameter.
 *
 * @return true if the parameter is read only, false (the default)
 */
//---------------------------------------------------------------------------
bool CCSDSTDMObtype::IsParameterRequired(const Integer id) const
{
if (id > 0 && id <= EndCCSDSTDMDataReps)
    return CCSDS_TDM_IS_REQUIRED[id];
else
    return false;
}